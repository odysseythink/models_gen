// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: models_gen.proto

#include "models_gen.pb.h"
#include "models_gen.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb_api {

static const char* ModelsGen_method_names[] = {
  "/pb_api.ModelsGen/KeepAlive",
  "/pb_api.ModelsGen/Login",
  "/pb_api.ModelsGen/GetAllTabNames",
  "/pb_api.ModelsGen/GetDbConnectInfo",
  "/pb_api.ModelsGen/OpenDb",
  "/pb_api.ModelsGen/GetTabNamesPage",
  "/pb_api.ModelsGen/GetTabSql",
  "/pb_api.ModelsGen/GetTabModelCode",
};

std::unique_ptr< ModelsGen::Stub> ModelsGen::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelsGen::Stub> stub(new ModelsGen::Stub(channel));
  return stub;
}

ModelsGen::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KeepAlive_(ModelsGen_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(ModelsGen_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllTabNames_(ModelsGen_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDbConnectInfo_(ModelsGen_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenDb_(ModelsGen_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTabNamesPage_(ModelsGen_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTabSql_(ModelsGen_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTabModelCode_(ModelsGen_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ModelsGen::Stub::KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::pb_api::PK_KEEPALIVE_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KeepAlive_, context, request, response);
}

void ModelsGen::Stub::experimental_async::KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KeepAlive_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KeepAlive_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KeepAlive_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KeepAlive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>* ModelsGen::Stub::AsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_KEEPALIVE_RSP>::Create(channel_.get(), cq, rpcmethod_KeepAlive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>* ModelsGen::Stub::PrepareAsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_KEEPALIVE_RSP>::Create(channel_.get(), cq, rpcmethod_KeepAlive_, context, request, false);
}

::grpc::Status ModelsGen::Stub::Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::pb_api::PK_USER_LOGIN_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void ModelsGen::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>* ModelsGen::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_USER_LOGIN_RSP>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>* ModelsGen::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_USER_LOGIN_RSP>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status ModelsGen::Stub::GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllTabNames_, context, request, response);
}

void ModelsGen::Stub::experimental_async::GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllTabNames_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllTabNames_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllTabNames_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllTabNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* ModelsGen::Stub::AsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_ALL_TABNAMES_RSP>::Create(channel_.get(), cq, rpcmethod_GetAllTabNames_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* ModelsGen::Stub::PrepareAsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_ALL_TABNAMES_RSP>::Create(channel_.get(), cq, rpcmethod_GetAllTabNames_, context, request, false);
}

::grpc::Status ModelsGen::Stub::GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDbConnectInfo_, context, request, response);
}

void ModelsGen::Stub::experimental_async::GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDbConnectInfo_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDbConnectInfo_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDbConnectInfo_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDbConnectInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* ModelsGen::Stub::AsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>::Create(channel_.get(), cq, rpcmethod_GetDbConnectInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* ModelsGen::Stub::PrepareAsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>::Create(channel_.get(), cq, rpcmethod_GetDbConnectInfo_, context, request, false);
}

::grpc::Status ModelsGen::Stub::OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::pb_api::PK_OPEN_DB_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDb_, context, request, response);
}

void ModelsGen::Stub::experimental_async::OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDb_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDb_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDb_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDb_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>* ModelsGen::Stub::AsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_OPEN_DB_RSP>::Create(channel_.get(), cq, rpcmethod_OpenDb_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>* ModelsGen::Stub::PrepareAsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_OPEN_DB_RSP>::Create(channel_.get(), cq, rpcmethod_OpenDb_, context, request, false);
}

::grpc::Status ModelsGen::Stub::GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTabNamesPage_, context, request, response);
}

void ModelsGen::Stub::experimental_async::GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabNamesPage_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabNamesPage_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabNamesPage_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabNamesPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* ModelsGen::Stub::AsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabNamesPage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* ModelsGen::Stub::PrepareAsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabNamesPage_, context, request, false);
}

::grpc::Status ModelsGen::Stub::GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::pb_api::PK_GET_TAB_SQL_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTabSql_, context, request, response);
}

void ModelsGen::Stub::experimental_async::GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabSql_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabSql_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabSql_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabSql_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>* ModelsGen::Stub::AsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TAB_SQL_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabSql_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>* ModelsGen::Stub::PrepareAsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TAB_SQL_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabSql_, context, request, false);
}

::grpc::Status ModelsGen::Stub::GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTabModelCode_, context, request, response);
}

void ModelsGen::Stub::experimental_async::GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabModelCode_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTabModelCode_, context, request, response, std::move(f));
}

void ModelsGen::Stub::experimental_async::GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabModelCode_, context, request, response, reactor);
}

void ModelsGen::Stub::experimental_async::GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTabModelCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* ModelsGen::Stub::AsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabModelCode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* ModelsGen::Stub::PrepareAsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>::Create(channel_.get(), cq, rpcmethod_GetTabModelCode_, context, request, false);
}

ModelsGen::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_KEEPALIVE_REQ* req,
             ::pb_api::PK_KEEPALIVE_RSP* resp) {
               return service->KeepAlive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_USER_LOGIN_REQ* req,
             ::pb_api::PK_USER_LOGIN_RSP* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_GET_ALL_TABNAMES_REQ* req,
             ::pb_api::PK_GET_ALL_TABNAMES_RSP* resp) {
               return service->GetAllTabNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* req,
             ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* resp) {
               return service->GetDbConnectInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_OPEN_DB_REQ* req,
             ::pb_api::PK_OPEN_DB_RSP* resp) {
               return service->OpenDb(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* req,
             ::pb_api::PK_GET_TABNAMES_PAGE_RSP* resp) {
               return service->GetTabNamesPage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_GET_TAB_SQL_REQ* req,
             ::pb_api::PK_GET_TAB_SQL_RSP* resp) {
               return service->GetTabSql(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsGen_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsGen::Service, ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>(
          [](ModelsGen::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* req,
             ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* resp) {
               return service->GetTabModelCode(ctx, req, resp);
             }, this)));
}

ModelsGen::Service::~Service() {
}

::grpc::Status ModelsGen::Service::KeepAlive(::grpc::ServerContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::Login(::grpc::ServerContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::GetAllTabNames(::grpc::ServerContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::GetDbConnectInfo(::grpc::ServerContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::OpenDb(::grpc::ServerContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::GetTabNamesPage(::grpc::ServerContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::GetTabSql(::grpc::ServerContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsGen::Service::GetTabModelCode(::grpc::ServerContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb_api

