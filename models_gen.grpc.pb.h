// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: models_gen.proto
#ifndef GRPC_models_5fgen_2eproto__INCLUDED
#define GRPC_models_5fgen_2eproto__INCLUDED

#include "models_gen.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pb_api {

// The base api service definition.
class ModelsGen final {
 public:
  static constexpr char const* service_full_name() {
    return "pb_api.ModelsGen";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::pb_api::PK_KEEPALIVE_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>> AsyncKeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>>(AsyncKeepAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>> PrepareAsyncKeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>>(PrepareAsyncKeepAliveRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::pb_api::PK_USER_LOGIN_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>> AsyncLogin(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>> AsyncGetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>>(AsyncGetAllTabNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>> PrepareAsyncGetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>>(PrepareAsyncGetAllTabNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>> AsyncGetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>>(AsyncGetDbConnectInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>> PrepareAsyncGetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>>(PrepareAsyncGetDbConnectInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::pb_api::PK_OPEN_DB_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>> AsyncOpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>>(AsyncOpenDbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>> PrepareAsyncOpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>>(PrepareAsyncOpenDbRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>> AsyncGetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>>(AsyncGetTabNamesPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>> PrepareAsyncGetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>>(PrepareAsyncGetTabNamesPageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::pb_api::PK_GET_TAB_SQL_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>> AsyncGetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>>(AsyncGetTabSqlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>> PrepareAsyncGetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>>(PrepareAsyncGetTabSqlRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>> AsyncGetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>>(AsyncGetTabModelCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>> PrepareAsyncGetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>>(PrepareAsyncGetTabModelCodeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>* AsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_KEEPALIVE_RSP>* PrepareAsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>* AsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_USER_LOGIN_RSP>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* AsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* PrepareAsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* AsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* PrepareAsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>* AsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_OPEN_DB_RSP>* PrepareAsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* AsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* PrepareAsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>* AsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_SQL_RSP>* PrepareAsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* AsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* PrepareAsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::pb_api::PK_KEEPALIVE_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>> AsyncKeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>>(AsyncKeepAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>> PrepareAsyncKeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>>(PrepareAsyncKeepAliveRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::pb_api::PK_USER_LOGIN_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>> AsyncLogin(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>> AsyncGetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>>(AsyncGetAllTabNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>> PrepareAsyncGetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>>(PrepareAsyncGetAllTabNamesRaw(context, request, cq));
    }
    ::grpc::Status GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>> AsyncGetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>>(AsyncGetDbConnectInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>> PrepareAsyncGetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>>(PrepareAsyncGetDbConnectInfoRaw(context, request, cq));
    }
    ::grpc::Status OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::pb_api::PK_OPEN_DB_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>> AsyncOpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>>(AsyncOpenDbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>> PrepareAsyncOpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>>(PrepareAsyncOpenDbRaw(context, request, cq));
    }
    ::grpc::Status GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>> AsyncGetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>>(AsyncGetTabNamesPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>> PrepareAsyncGetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>>(PrepareAsyncGetTabNamesPageRaw(context, request, cq));
    }
    ::grpc::Status GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::pb_api::PK_GET_TAB_SQL_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>> AsyncGetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>>(AsyncGetTabSqlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>> PrepareAsyncGetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>>(PrepareAsyncGetTabSqlRaw(context, request, cq));
    }
    ::grpc::Status GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>> AsyncGetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>>(AsyncGetTabModelCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>> PrepareAsyncGetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>>(PrepareAsyncGetTabModelCodeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)>) override;
      void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void KeepAlive(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void KeepAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_KEEPALIVE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_USER_LOGIN_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)>) override;
      void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllTabNames(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllTabNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)>) override;
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDbConnectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)>) override;
      void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDb(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDb(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_OPEN_DB_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)>) override;
      void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabNamesPage(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabNamesPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)>) override;
      void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabSql(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabSql(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_SQL_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)>) override;
      void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabModelCode(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTabModelCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>* AsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_KEEPALIVE_RSP>* PrepareAsyncKeepAliveRaw(::grpc::ClientContext* context, const ::pb_api::PK_KEEPALIVE_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>* AsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_USER_LOGIN_RSP>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::pb_api::PK_USER_LOGIN_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* AsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* PrepareAsyncGetAllTabNamesRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* AsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* PrepareAsyncGetDbConnectInfoRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>* AsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_OPEN_DB_RSP>* PrepareAsyncOpenDbRaw(::grpc::ClientContext* context, const ::pb_api::PK_OPEN_DB_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* AsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* PrepareAsyncGetTabNamesPageRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>* AsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_SQL_RSP>* PrepareAsyncGetTabSqlRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* AsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* PrepareAsyncGetTabModelCodeRaw(::grpc::ClientContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_KeepAlive_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllTabNames_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDbConnectInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDb_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabNamesPage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabSql_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabModelCode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status KeepAlive(::grpc::ServerContext* context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response);
    virtual ::grpc::Status GetAllTabNames(::grpc::ServerContext* context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response);
    virtual ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response);
    virtual ::grpc::Status OpenDb(::grpc::ServerContext* context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response);
    virtual ::grpc::Status GetTabNamesPage(::grpc::ServerContext* context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response);
    virtual ::grpc::Status GetTabSql(::grpc::ServerContext* context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response);
    virtual ::grpc::Status GetTabModelCode(::grpc::ServerContext* context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_KeepAlive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeepAlive(::grpc::ServerContext* context, ::pb_api::PK_KEEPALIVE_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_KEEPALIVE_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::pb_api::PK_USER_LOGIN_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_USER_LOGIN_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllTabNames() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllTabNames(::grpc::ServerContext* context, ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_GET_ALL_TABNAMES_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDbConnectInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDbConnectInfo(::grpc::ServerContext* context, ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDb() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDb(::grpc::ServerContext* context, ::pb_api::PK_OPEN_DB_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_OPEN_DB_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabNamesPage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabNamesPage(::grpc::ServerContext* context, ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabSql() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabSql(::grpc::ServerContext* context, ::pb_api::PK_GET_TAB_SQL_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_GET_TAB_SQL_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabModelCode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabModelCode(::grpc::ServerContext* context, ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::grpc::ServerAsyncResponseWriter< ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_KeepAlive<WithAsyncMethod_Login<WithAsyncMethod_GetAllTabNames<WithAsyncMethod_GetDbConnectInfo<WithAsyncMethod_OpenDb<WithAsyncMethod_GetTabNamesPage<WithAsyncMethod_GetTabSql<WithAsyncMethod_GetTabModelCode<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_KeepAlive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_KEEPALIVE_REQ* request, ::pb_api::PK_KEEPALIVE_RSP* response) { return this->KeepAlive(context, request, response); }));}
    void SetMessageAllocatorFor_KeepAlive(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* KeepAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* KeepAlive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_USER_LOGIN_REQ* request, ::pb_api::PK_USER_LOGIN_RSP* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllTabNames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* request, ::pb_api::PK_GET_ALL_TABNAMES_RSP* response) { return this->GetAllTabNames(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllTabNames(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllTabNames(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllTabNames(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDbConnectInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* request, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* response) { return this->GetDbConnectInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetDbConnectInfo(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDbConnectInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDbConnectInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenDb() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_OPEN_DB_REQ* request, ::pb_api::PK_OPEN_DB_RSP* response) { return this->OpenDb(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDb(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDb(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDb(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTabNamesPage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* request, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* response) { return this->GetTabNamesPage(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabNamesPage(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabNamesPage(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabNamesPage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTabSql() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_GET_TAB_SQL_REQ* request, ::pb_api::PK_GET_TAB_SQL_RSP* response) { return this->GetTabSql(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabSql(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabSql(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabSql(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTabModelCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* request, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* response) { return this->GetTabModelCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabModelCode(
        ::grpc::experimental::MessageAllocator< ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabModelCode(
      ::grpc::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabModelCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_KeepAlive<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_GetAllTabNames<ExperimentalWithCallbackMethod_GetDbConnectInfo<ExperimentalWithCallbackMethod_OpenDb<ExperimentalWithCallbackMethod_GetTabNamesPage<ExperimentalWithCallbackMethod_GetTabSql<ExperimentalWithCallbackMethod_GetTabModelCode<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_KeepAlive<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_GetAllTabNames<ExperimentalWithCallbackMethod_GetDbConnectInfo<ExperimentalWithCallbackMethod_OpenDb<ExperimentalWithCallbackMethod_GetTabNamesPage<ExperimentalWithCallbackMethod_GetTabSql<ExperimentalWithCallbackMethod_GetTabModelCode<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_KeepAlive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllTabNames() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDbConnectInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDb() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabNamesPage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabSql() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabModelCode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_KeepAlive() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeepAlive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllTabNames() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllTabNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDbConnectInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDbConnectInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDb() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabNamesPage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabNamesPage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabSql() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabSql(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabModelCode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabModelCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_KeepAlive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->KeepAlive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* KeepAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* KeepAlive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllTabNames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllTabNames(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllTabNames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllTabNames(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDbConnectInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDbConnectInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDbConnectInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDbConnectInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenDb() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDb(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDb(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDb(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTabNamesPage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabNamesPage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabNamesPage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabNamesPage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTabSql() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabSql(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabSql(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabSql(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTabModelCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabModelCode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTabModelCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTabModelCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KeepAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_KeepAlive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_KEEPALIVE_REQ, ::pb_api::PK_KEEPALIVE_RSP>* streamer) {
                       return this->StreamedKeepAlive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_KeepAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KeepAlive(::grpc::ServerContext* /*context*/, const ::pb_api::PK_KEEPALIVE_REQ* /*request*/, ::pb_api::PK_KEEPALIVE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKeepAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_KEEPALIVE_REQ,::pb_api::PK_KEEPALIVE_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_USER_LOGIN_REQ, ::pb_api::PK_USER_LOGIN_RSP>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::pb_api::PK_USER_LOGIN_REQ* /*request*/, ::pb_api::PK_USER_LOGIN_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_USER_LOGIN_REQ,::pb_api::PK_USER_LOGIN_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllTabNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllTabNames() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_GET_ALL_TABNAMES_REQ, ::pb_api::PK_GET_ALL_TABNAMES_RSP>* streamer) {
                       return this->StreamedGetAllTabNames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllTabNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllTabNames(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_ALL_TABNAMES_REQ* /*request*/, ::pb_api::PK_GET_ALL_TABNAMES_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllTabNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_GET_ALL_TABNAMES_REQ,::pb_api::PK_GET_ALL_TABNAMES_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDbConnectInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDbConnectInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_GET_DB_CONNECT_INFO_REQ, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* streamer) {
                       return this->StreamedGetDbConnectInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDbConnectInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDbConnectInfo(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_DB_CONNECT_INFO_REQ* /*request*/, ::pb_api::PK_GET_DB_CONNECT_INFO_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDbConnectInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_GET_DB_CONNECT_INFO_REQ,::pb_api::PK_GET_DB_CONNECT_INFO_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDb() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_OPEN_DB_REQ, ::pb_api::PK_OPEN_DB_RSP>* streamer) {
                       return this->StreamedOpenDb(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDb(::grpc::ServerContext* /*context*/, const ::pb_api::PK_OPEN_DB_REQ* /*request*/, ::pb_api::PK_OPEN_DB_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDb(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_OPEN_DB_REQ,::pb_api::PK_OPEN_DB_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabNamesPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabNamesPage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_GET_TABNAMES_PAGE_REQ, ::pb_api::PK_GET_TABNAMES_PAGE_RSP>* streamer) {
                       return this->StreamedGetTabNamesPage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabNamesPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabNamesPage(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TABNAMES_PAGE_REQ* /*request*/, ::pb_api::PK_GET_TABNAMES_PAGE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabNamesPage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_GET_TABNAMES_PAGE_REQ,::pb_api::PK_GET_TABNAMES_PAGE_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabSql() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_GET_TAB_SQL_REQ, ::pb_api::PK_GET_TAB_SQL_RSP>* streamer) {
                       return this->StreamedGetTabSql(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabSql(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_SQL_REQ* /*request*/, ::pb_api::PK_GET_TAB_SQL_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabSql(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_GET_TAB_SQL_REQ,::pb_api::PK_GET_TAB_SQL_RSP>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabModelCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabModelCode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::pb_api::PK_GET_TAB_MODEL_CODE_REQ, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* streamer) {
                       return this->StreamedGetTabModelCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabModelCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabModelCode(::grpc::ServerContext* /*context*/, const ::pb_api::PK_GET_TAB_MODEL_CODE_REQ* /*request*/, ::pb_api::PK_GET_TAB_MODEL_CODE_RSP* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabModelCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb_api::PK_GET_TAB_MODEL_CODE_REQ,::pb_api::PK_GET_TAB_MODEL_CODE_RSP>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_KeepAlive<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_GetAllTabNames<WithStreamedUnaryMethod_GetDbConnectInfo<WithStreamedUnaryMethod_OpenDb<WithStreamedUnaryMethod_GetTabNamesPage<WithStreamedUnaryMethod_GetTabSql<WithStreamedUnaryMethod_GetTabModelCode<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_KeepAlive<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_GetAllTabNames<WithStreamedUnaryMethod_GetDbConnectInfo<WithStreamedUnaryMethod_OpenDb<WithStreamedUnaryMethod_GetTabNamesPage<WithStreamedUnaryMethod_GetTabSql<WithStreamedUnaryMethod_GetTabModelCode<Service > > > > > > > > StreamedService;
};

}  // namespace pb_api


#endif  // GRPC_models_5fgen_2eproto__INCLUDED
