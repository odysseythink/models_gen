// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace pbapi {
class PK_GET_ALL_TABNAMES_REQ;
class PK_GET_ALL_TABNAMES_REQDefaultTypeInternal;
extern PK_GET_ALL_TABNAMES_REQDefaultTypeInternal _PK_GET_ALL_TABNAMES_REQ_default_instance_;
class PK_GET_ALL_TABNAMES_RSP;
class PK_GET_ALL_TABNAMES_RSPDefaultTypeInternal;
extern PK_GET_ALL_TABNAMES_RSPDefaultTypeInternal _PK_GET_ALL_TABNAMES_RSP_default_instance_;
class PK_GET_TABNAMES_PAGE_REQ;
class PK_GET_TABNAMES_PAGE_REQDefaultTypeInternal;
extern PK_GET_TABNAMES_PAGE_REQDefaultTypeInternal _PK_GET_TABNAMES_PAGE_REQ_default_instance_;
class PK_GET_TABNAMES_PAGE_RSP;
class PK_GET_TABNAMES_PAGE_RSPDefaultTypeInternal;
extern PK_GET_TABNAMES_PAGE_RSPDefaultTypeInternal _PK_GET_TABNAMES_PAGE_RSP_default_instance_;
class PK_GET_TAB_MODEL_CODE_REQ;
class PK_GET_TAB_MODEL_CODE_REQDefaultTypeInternal;
extern PK_GET_TAB_MODEL_CODE_REQDefaultTypeInternal _PK_GET_TAB_MODEL_CODE_REQ_default_instance_;
class PK_GET_TAB_MODEL_CODE_RSP;
class PK_GET_TAB_MODEL_CODE_RSPDefaultTypeInternal;
extern PK_GET_TAB_MODEL_CODE_RSPDefaultTypeInternal _PK_GET_TAB_MODEL_CODE_RSP_default_instance_;
class PK_GET_TAB_SQL_REQ;
class PK_GET_TAB_SQL_REQDefaultTypeInternal;
extern PK_GET_TAB_SQL_REQDefaultTypeInternal _PK_GET_TAB_SQL_REQ_default_instance_;
class PK_GET_TAB_SQL_RSP;
class PK_GET_TAB_SQL_RSPDefaultTypeInternal;
extern PK_GET_TAB_SQL_RSPDefaultTypeInternal _PK_GET_TAB_SQL_RSP_default_instance_;
class PK_KEEPALIVE_REQ;
class PK_KEEPALIVE_REQDefaultTypeInternal;
extern PK_KEEPALIVE_REQDefaultTypeInternal _PK_KEEPALIVE_REQ_default_instance_;
class PK_KEEPALIVE_RSP;
class PK_KEEPALIVE_RSPDefaultTypeInternal;
extern PK_KEEPALIVE_RSPDefaultTypeInternal _PK_KEEPALIVE_RSP_default_instance_;
class PK_OPEN_DB_REQ;
class PK_OPEN_DB_REQDefaultTypeInternal;
extern PK_OPEN_DB_REQDefaultTypeInternal _PK_OPEN_DB_REQ_default_instance_;
class PK_OPEN_DB_RSP;
class PK_OPEN_DB_RSPDefaultTypeInternal;
extern PK_OPEN_DB_RSPDefaultTypeInternal _PK_OPEN_DB_RSP_default_instance_;
class PK_SET_LOG_DIR_REQ;
class PK_SET_LOG_DIR_REQDefaultTypeInternal;
extern PK_SET_LOG_DIR_REQDefaultTypeInternal _PK_SET_LOG_DIR_REQ_default_instance_;
class PK_SET_LOG_DIR_RSP;
class PK_SET_LOG_DIR_RSPDefaultTypeInternal;
extern PK_SET_LOG_DIR_RSPDefaultTypeInternal _PK_SET_LOG_DIR_RSP_default_instance_;
class PK_USER_LOGIN_REQ;
class PK_USER_LOGIN_REQDefaultTypeInternal;
extern PK_USER_LOGIN_REQDefaultTypeInternal _PK_USER_LOGIN_REQ_default_instance_;
class PK_USER_LOGIN_RSP;
class PK_USER_LOGIN_RSPDefaultTypeInternal;
extern PK_USER_LOGIN_RSPDefaultTypeInternal _PK_USER_LOGIN_RSP_default_instance_;
}  // namespace pbapi
PROTOBUF_NAMESPACE_OPEN
template<> ::pbapi::PK_GET_ALL_TABNAMES_REQ* Arena::CreateMaybeMessage<::pbapi::PK_GET_ALL_TABNAMES_REQ>(Arena*);
template<> ::pbapi::PK_GET_ALL_TABNAMES_RSP* Arena::CreateMaybeMessage<::pbapi::PK_GET_ALL_TABNAMES_RSP>(Arena*);
template<> ::pbapi::PK_GET_TABNAMES_PAGE_REQ* Arena::CreateMaybeMessage<::pbapi::PK_GET_TABNAMES_PAGE_REQ>(Arena*);
template<> ::pbapi::PK_GET_TABNAMES_PAGE_RSP* Arena::CreateMaybeMessage<::pbapi::PK_GET_TABNAMES_PAGE_RSP>(Arena*);
template<> ::pbapi::PK_GET_TAB_MODEL_CODE_REQ* Arena::CreateMaybeMessage<::pbapi::PK_GET_TAB_MODEL_CODE_REQ>(Arena*);
template<> ::pbapi::PK_GET_TAB_MODEL_CODE_RSP* Arena::CreateMaybeMessage<::pbapi::PK_GET_TAB_MODEL_CODE_RSP>(Arena*);
template<> ::pbapi::PK_GET_TAB_SQL_REQ* Arena::CreateMaybeMessage<::pbapi::PK_GET_TAB_SQL_REQ>(Arena*);
template<> ::pbapi::PK_GET_TAB_SQL_RSP* Arena::CreateMaybeMessage<::pbapi::PK_GET_TAB_SQL_RSP>(Arena*);
template<> ::pbapi::PK_KEEPALIVE_REQ* Arena::CreateMaybeMessage<::pbapi::PK_KEEPALIVE_REQ>(Arena*);
template<> ::pbapi::PK_KEEPALIVE_RSP* Arena::CreateMaybeMessage<::pbapi::PK_KEEPALIVE_RSP>(Arena*);
template<> ::pbapi::PK_OPEN_DB_REQ* Arena::CreateMaybeMessage<::pbapi::PK_OPEN_DB_REQ>(Arena*);
template<> ::pbapi::PK_OPEN_DB_RSP* Arena::CreateMaybeMessage<::pbapi::PK_OPEN_DB_RSP>(Arena*);
template<> ::pbapi::PK_SET_LOG_DIR_REQ* Arena::CreateMaybeMessage<::pbapi::PK_SET_LOG_DIR_REQ>(Arena*);
template<> ::pbapi::PK_SET_LOG_DIR_RSP* Arena::CreateMaybeMessage<::pbapi::PK_SET_LOG_DIR_RSP>(Arena*);
template<> ::pbapi::PK_USER_LOGIN_REQ* Arena::CreateMaybeMessage<::pbapi::PK_USER_LOGIN_REQ>(Arena*);
template<> ::pbapi::PK_USER_LOGIN_RSP* Arena::CreateMaybeMessage<::pbapi::PK_USER_LOGIN_RSP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbapi {

enum PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ : int {
  PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_UNKNOWN = 0,
  PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD = 168493057,
  PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_IsValid(int value);
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_MIN = PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_UNKNOWN;
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_MAX = PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD;
constexpr int PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_ARRAYSIZE = PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor();
template<typename T>
inline const std::string& PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor(), enum_t_value);
}
inline bool PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_Parse(
    const std::string& name, PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ>(
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor(), name, value);
}
enum PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP : int {
  PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_UNKNOWN = 0,
  PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD = 185204737,
  PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_IsValid(int value);
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_MIN = PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_UNKNOWN;
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_MAX = PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD;
constexpr int PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_ARRAYSIZE = PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor();
template<typename T>
inline const std::string& PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor(), enum_t_value);
}
inline bool PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_Parse(
    const std::string& name, PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP>(
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor(), name, value);
}
enum PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ : int {
  PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_UNKNOWN = 0,
  PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD = 168493058,
  PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_IsValid(int value);
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_MIN = PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_UNKNOWN;
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_MAX = PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD;
constexpr int PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_ARRAYSIZE = PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor();
template<typename T>
inline const std::string& PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor(), enum_t_value);
}
inline bool PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_Parse(
    const std::string& name, PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ>(
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor(), name, value);
}
enum PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP : int {
  PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_UNKNOWN = 0,
  PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD = 185204738,
  PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_IsValid(int value);
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_MIN = PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_UNKNOWN;
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_MAX = PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD;
constexpr int PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_ARRAYSIZE = PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor();
template<typename T>
inline const std::string& PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor(), enum_t_value);
}
inline bool PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_Parse(
    const std::string& name, PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP>(
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor(), name, value);
}
enum PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ : int {
  PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_UNKNOWN = 0,
  PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD = 168493059,
  PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_IsValid(int value);
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_MIN = PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_UNKNOWN;
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_MAX = PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD;
constexpr int PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_ARRAYSIZE = PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor();
template<typename T>
inline const std::string& PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor(), enum_t_value);
}
inline bool PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_Parse(
    const std::string& name, PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ>(
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor(), name, value);
}
enum PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP : int {
  PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_UNKNOWN = 0,
  PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD = 185204739,
  PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_IsValid(int value);
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_MIN = PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_UNKNOWN;
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_MAX = PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD;
constexpr int PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_ARRAYSIZE = PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor();
template<typename T>
inline const std::string& PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor(), enum_t_value);
}
inline bool PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_Parse(
    const std::string& name, PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP>(
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor(), name, value);
}
enum PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ : int {
  PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_UNKNOWN = 0,
  PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD = 168493061,
  PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_IsValid(int value);
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_MIN = PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_UNKNOWN;
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_MAX = PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD;
constexpr int PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_ARRAYSIZE = PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor();
template<typename T>
inline const std::string& PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor(), enum_t_value);
}
inline bool PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_Parse(
    const std::string& name, PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ>(
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor(), name, value);
}
enum PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP : int {
  PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_UNKNOWN = 0,
  PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD = 185204741,
  PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_IsValid(int value);
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_MIN = PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_UNKNOWN;
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_MAX = PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD;
constexpr int PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_ARRAYSIZE = PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor();
template<typename T>
inline const std::string& PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor(), enum_t_value);
}
inline bool PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_Parse(
    const std::string& name, PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP>(
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor(), name, value);
}
enum PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ : int {
  PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_UNKNOWN = 0,
  PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD = 168493062,
  PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_IsValid(int value);
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_MIN = PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_UNKNOWN;
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_MAX = PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD;
constexpr int PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_ARRAYSIZE = PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor();
template<typename T>
inline const std::string& PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor(), enum_t_value);
}
inline bool PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_Parse(
    const std::string& name, PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ>(
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor(), name, value);
}
enum PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP : int {
  PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_UNKNOWN = 0,
  PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD = 185204742,
  PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_IsValid(int value);
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_MIN = PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_UNKNOWN;
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_MAX = PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD;
constexpr int PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_ARRAYSIZE = PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor();
template<typename T>
inline const std::string& PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor(), enum_t_value);
}
inline bool PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_Parse(
    const std::string& name, PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP>(
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor(), name, value);
}
enum PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ : int {
  PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_UNKNOWN = 0,
  PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD = 168493063,
  PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_IsValid(int value);
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_MIN = PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_UNKNOWN;
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_MAX = PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD;
constexpr int PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_ARRAYSIZE = PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor();
template<typename T>
inline const std::string& PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor(), enum_t_value);
}
inline bool PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_Parse(
    const std::string& name, PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ>(
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor(), name, value);
}
enum PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP : int {
  PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_UNKNOWN = 0,
  PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD = 185204743,
  PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_IsValid(int value);
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_MIN = PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_UNKNOWN;
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_MAX = PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD;
constexpr int PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_ARRAYSIZE = PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor();
template<typename T>
inline const std::string& PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor(), enum_t_value);
}
inline bool PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_Parse(
    const std::string& name, PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP>(
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor(), name, value);
}
enum PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ : int {
  PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_UNKNOWN = 0,
  PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD = 168493064,
  PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_IsValid(int value);
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_MIN = PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_UNKNOWN;
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_MAX = PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD;
constexpr int PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_ARRAYSIZE = PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor();
template<typename T>
inline const std::string& PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor(), enum_t_value);
}
inline bool PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_Parse(
    const std::string& name, PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ>(
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor(), name, value);
}
enum PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP : int {
  PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_UNKNOWN = 0,
  PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD = 185204744,
  PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_IsValid(int value);
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_MIN = PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_UNKNOWN;
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_MAX = PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD;
constexpr int PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_ARRAYSIZE = PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor();
template<typename T>
inline const std::string& PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor(), enum_t_value);
}
inline bool PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_Parse(
    const std::string& name, PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP>(
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor(), name, value);
}
enum PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ : int {
  PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_UNKNOWN = 0,
  PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD = 168493066,
  PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_IsValid(int value);
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_MIN = PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_UNKNOWN;
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_MAX = PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD;
constexpr int PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_ARRAYSIZE = PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor();
template<typename T>
inline const std::string& PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor(), enum_t_value);
}
inline bool PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_Parse(
    const std::string& name, PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ>(
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor(), name, value);
}
enum PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP : int {
  PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_UNKNOWN = 0,
  PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD = 185204746,
  PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_IsValid(int value);
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_MIN = PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_UNKNOWN;
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_MAX = PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD;
constexpr int PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_ARRAYSIZE = PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor();
template<typename T>
inline const std::string& PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor(), enum_t_value);
}
inline bool PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_Parse(
    const std::string& name, PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP>(
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor(), name, value);
}
// ===================================================================

class PK_KEEPALIVE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_KEEPALIVE_REQ) */ {
 public:
  PK_KEEPALIVE_REQ();
  virtual ~PK_KEEPALIVE_REQ();

  PK_KEEPALIVE_REQ(const PK_KEEPALIVE_REQ& from);
  PK_KEEPALIVE_REQ(PK_KEEPALIVE_REQ&& from) noexcept
    : PK_KEEPALIVE_REQ() {
    *this = ::std::move(from);
  }

  inline PK_KEEPALIVE_REQ& operator=(const PK_KEEPALIVE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_KEEPALIVE_REQ& operator=(PK_KEEPALIVE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_KEEPALIVE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_KEEPALIVE_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_KEEPALIVE_REQ*>(
               &_PK_KEEPALIVE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PK_KEEPALIVE_REQ& a, PK_KEEPALIVE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_KEEPALIVE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_KEEPALIVE_REQ* New() const final {
    return CreateMaybeMessage<PK_KEEPALIVE_REQ>(nullptr);
  }

  PK_KEEPALIVE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_KEEPALIVE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_KEEPALIVE_REQ& from);
  void MergeFrom(const PK_KEEPALIVE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_KEEPALIVE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_KEEPALIVE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ CMD_KEEPALIVE_REQ;
  static constexpr CMD_KEEPALIVE_REQ UNKNOWN =
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_UNKNOWN;
  static constexpr CMD_KEEPALIVE_REQ CMD =
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD;
  static inline bool CMD_KEEPALIVE_REQ_IsValid(int value) {
    return PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_IsValid(value);
  }
  static constexpr CMD_KEEPALIVE_REQ CMD_KEEPALIVE_REQ_MIN =
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_MIN;
  static constexpr CMD_KEEPALIVE_REQ CMD_KEEPALIVE_REQ_MAX =
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_MAX;
  static constexpr int CMD_KEEPALIVE_REQ_ARRAYSIZE =
    PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_KEEPALIVE_REQ_descriptor() {
    return PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_KEEPALIVE_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_KEEPALIVE_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_KEEPALIVE_REQ_Name.");
    return PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_Name(enum_t_value);
  }
  static inline bool CMD_KEEPALIVE_REQ_Parse(const std::string& name,
      CMD_KEEPALIVE_REQ* value) {
    return PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbapi.PK_KEEPALIVE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_KEEPALIVE_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_KEEPALIVE_RSP) */ {
 public:
  PK_KEEPALIVE_RSP();
  virtual ~PK_KEEPALIVE_RSP();

  PK_KEEPALIVE_RSP(const PK_KEEPALIVE_RSP& from);
  PK_KEEPALIVE_RSP(PK_KEEPALIVE_RSP&& from) noexcept
    : PK_KEEPALIVE_RSP() {
    *this = ::std::move(from);
  }

  inline PK_KEEPALIVE_RSP& operator=(const PK_KEEPALIVE_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_KEEPALIVE_RSP& operator=(PK_KEEPALIVE_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_KEEPALIVE_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_KEEPALIVE_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_KEEPALIVE_RSP*>(
               &_PK_KEEPALIVE_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PK_KEEPALIVE_RSP& a, PK_KEEPALIVE_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_KEEPALIVE_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_KEEPALIVE_RSP* New() const final {
    return CreateMaybeMessage<PK_KEEPALIVE_RSP>(nullptr);
  }

  PK_KEEPALIVE_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_KEEPALIVE_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_KEEPALIVE_RSP& from);
  void MergeFrom(const PK_KEEPALIVE_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_KEEPALIVE_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_KEEPALIVE_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP CMD_KEEPALIVE_RSP;
  static constexpr CMD_KEEPALIVE_RSP UNKNOWN =
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_UNKNOWN;
  static constexpr CMD_KEEPALIVE_RSP CMD =
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD;
  static inline bool CMD_KEEPALIVE_RSP_IsValid(int value) {
    return PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_IsValid(value);
  }
  static constexpr CMD_KEEPALIVE_RSP CMD_KEEPALIVE_RSP_MIN =
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_MIN;
  static constexpr CMD_KEEPALIVE_RSP CMD_KEEPALIVE_RSP_MAX =
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_MAX;
  static constexpr int CMD_KEEPALIVE_RSP_ARRAYSIZE =
    PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_KEEPALIVE_RSP_descriptor() {
    return PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_KEEPALIVE_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_KEEPALIVE_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_KEEPALIVE_RSP_Name.");
    return PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_Name(enum_t_value);
  }
  static inline bool CMD_KEEPALIVE_RSP_Parse(const std::string& name,
      CMD_KEEPALIVE_RSP* value) {
    return PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbapi.PK_KEEPALIVE_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_USER_LOGIN_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_USER_LOGIN_REQ) */ {
 public:
  PK_USER_LOGIN_REQ();
  virtual ~PK_USER_LOGIN_REQ();

  PK_USER_LOGIN_REQ(const PK_USER_LOGIN_REQ& from);
  PK_USER_LOGIN_REQ(PK_USER_LOGIN_REQ&& from) noexcept
    : PK_USER_LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline PK_USER_LOGIN_REQ& operator=(const PK_USER_LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_USER_LOGIN_REQ& operator=(PK_USER_LOGIN_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_USER_LOGIN_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_USER_LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_USER_LOGIN_REQ*>(
               &_PK_USER_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PK_USER_LOGIN_REQ& a, PK_USER_LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_USER_LOGIN_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_USER_LOGIN_REQ* New() const final {
    return CreateMaybeMessage<PK_USER_LOGIN_REQ>(nullptr);
  }

  PK_USER_LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_USER_LOGIN_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_USER_LOGIN_REQ& from);
  void MergeFrom(const PK_USER_LOGIN_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_USER_LOGIN_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_USER_LOGIN_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ CMD_USER_LOGIN_REQ;
  static constexpr CMD_USER_LOGIN_REQ UNKNOWN =
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_UNKNOWN;
  static constexpr CMD_USER_LOGIN_REQ CMD =
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD;
  static inline bool CMD_USER_LOGIN_REQ_IsValid(int value) {
    return PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_IsValid(value);
  }
  static constexpr CMD_USER_LOGIN_REQ CMD_USER_LOGIN_REQ_MIN =
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_MIN;
  static constexpr CMD_USER_LOGIN_REQ CMD_USER_LOGIN_REQ_MAX =
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_MAX;
  static constexpr int CMD_USER_LOGIN_REQ_ARRAYSIZE =
    PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_USER_LOGIN_REQ_descriptor() {
    return PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_USER_LOGIN_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_USER_LOGIN_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_USER_LOGIN_REQ_Name.");
    return PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_Name(enum_t_value);
  }
  static inline bool CMD_USER_LOGIN_REQ_Parse(const std::string& name,
      CMD_USER_LOGIN_REQ* value) {
    return PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_USER_LOGIN_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_USER_LOGIN_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_USER_LOGIN_RSP) */ {
 public:
  PK_USER_LOGIN_RSP();
  virtual ~PK_USER_LOGIN_RSP();

  PK_USER_LOGIN_RSP(const PK_USER_LOGIN_RSP& from);
  PK_USER_LOGIN_RSP(PK_USER_LOGIN_RSP&& from) noexcept
    : PK_USER_LOGIN_RSP() {
    *this = ::std::move(from);
  }

  inline PK_USER_LOGIN_RSP& operator=(const PK_USER_LOGIN_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_USER_LOGIN_RSP& operator=(PK_USER_LOGIN_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_USER_LOGIN_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_USER_LOGIN_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_USER_LOGIN_RSP*>(
               &_PK_USER_LOGIN_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PK_USER_LOGIN_RSP& a, PK_USER_LOGIN_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_USER_LOGIN_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_USER_LOGIN_RSP* New() const final {
    return CreateMaybeMessage<PK_USER_LOGIN_RSP>(nullptr);
  }

  PK_USER_LOGIN_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_USER_LOGIN_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_USER_LOGIN_RSP& from);
  void MergeFrom(const PK_USER_LOGIN_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_USER_LOGIN_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_USER_LOGIN_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP CMD_USER_LOGIN_RSP;
  static constexpr CMD_USER_LOGIN_RSP UNKNOWN =
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_UNKNOWN;
  static constexpr CMD_USER_LOGIN_RSP CMD =
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD;
  static inline bool CMD_USER_LOGIN_RSP_IsValid(int value) {
    return PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_IsValid(value);
  }
  static constexpr CMD_USER_LOGIN_RSP CMD_USER_LOGIN_RSP_MIN =
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_MIN;
  static constexpr CMD_USER_LOGIN_RSP CMD_USER_LOGIN_RSP_MAX =
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_MAX;
  static constexpr int CMD_USER_LOGIN_RSP_ARRAYSIZE =
    PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_USER_LOGIN_RSP_descriptor() {
    return PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_USER_LOGIN_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_USER_LOGIN_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_USER_LOGIN_RSP_Name.");
    return PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_Name(enum_t_value);
  }
  static inline bool CMD_USER_LOGIN_RSP_Parse(const std::string& name,
      CMD_USER_LOGIN_RSP* value) {
    return PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 1,
  };
  // string errMsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_USER_LOGIN_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_ALL_TABNAMES_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_ALL_TABNAMES_REQ) */ {
 public:
  PK_GET_ALL_TABNAMES_REQ();
  virtual ~PK_GET_ALL_TABNAMES_REQ();

  PK_GET_ALL_TABNAMES_REQ(const PK_GET_ALL_TABNAMES_REQ& from);
  PK_GET_ALL_TABNAMES_REQ(PK_GET_ALL_TABNAMES_REQ&& from) noexcept
    : PK_GET_ALL_TABNAMES_REQ() {
    *this = ::std::move(from);
  }

  inline PK_GET_ALL_TABNAMES_REQ& operator=(const PK_GET_ALL_TABNAMES_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_ALL_TABNAMES_REQ& operator=(PK_GET_ALL_TABNAMES_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_ALL_TABNAMES_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_ALL_TABNAMES_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_GET_ALL_TABNAMES_REQ*>(
               &_PK_GET_ALL_TABNAMES_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PK_GET_ALL_TABNAMES_REQ& a, PK_GET_ALL_TABNAMES_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_ALL_TABNAMES_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_ALL_TABNAMES_REQ* New() const final {
    return CreateMaybeMessage<PK_GET_ALL_TABNAMES_REQ>(nullptr);
  }

  PK_GET_ALL_TABNAMES_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_ALL_TABNAMES_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_ALL_TABNAMES_REQ& from);
  void MergeFrom(const PK_GET_ALL_TABNAMES_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_ALL_TABNAMES_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_ALL_TABNAMES_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ CMD_GET_ALL_TABNAMES_REQ;
  static constexpr CMD_GET_ALL_TABNAMES_REQ UNKNOWN =
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_UNKNOWN;
  static constexpr CMD_GET_ALL_TABNAMES_REQ CMD =
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD;
  static inline bool CMD_GET_ALL_TABNAMES_REQ_IsValid(int value) {
    return PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_IsValid(value);
  }
  static constexpr CMD_GET_ALL_TABNAMES_REQ CMD_GET_ALL_TABNAMES_REQ_MIN =
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_MIN;
  static constexpr CMD_GET_ALL_TABNAMES_REQ CMD_GET_ALL_TABNAMES_REQ_MAX =
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_MAX;
  static constexpr int CMD_GET_ALL_TABNAMES_REQ_ARRAYSIZE =
    PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_ALL_TABNAMES_REQ_descriptor() {
    return PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_ALL_TABNAMES_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_ALL_TABNAMES_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_ALL_TABNAMES_REQ_Name.");
    return PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_Name(enum_t_value);
  }
  static inline bool CMD_GET_ALL_TABNAMES_REQ_Parse(const std::string& name,
      CMD_GET_ALL_TABNAMES_REQ* value) {
    return PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_ALL_TABNAMES_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_ALL_TABNAMES_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_ALL_TABNAMES_RSP) */ {
 public:
  PK_GET_ALL_TABNAMES_RSP();
  virtual ~PK_GET_ALL_TABNAMES_RSP();

  PK_GET_ALL_TABNAMES_RSP(const PK_GET_ALL_TABNAMES_RSP& from);
  PK_GET_ALL_TABNAMES_RSP(PK_GET_ALL_TABNAMES_RSP&& from) noexcept
    : PK_GET_ALL_TABNAMES_RSP() {
    *this = ::std::move(from);
  }

  inline PK_GET_ALL_TABNAMES_RSP& operator=(const PK_GET_ALL_TABNAMES_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_ALL_TABNAMES_RSP& operator=(PK_GET_ALL_TABNAMES_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_ALL_TABNAMES_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_ALL_TABNAMES_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_GET_ALL_TABNAMES_RSP*>(
               &_PK_GET_ALL_TABNAMES_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PK_GET_ALL_TABNAMES_RSP& a, PK_GET_ALL_TABNAMES_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_ALL_TABNAMES_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_ALL_TABNAMES_RSP* New() const final {
    return CreateMaybeMessage<PK_GET_ALL_TABNAMES_RSP>(nullptr);
  }

  PK_GET_ALL_TABNAMES_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_ALL_TABNAMES_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_ALL_TABNAMES_RSP& from);
  void MergeFrom(const PK_GET_ALL_TABNAMES_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_ALL_TABNAMES_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_ALL_TABNAMES_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP CMD_GET_ALL_TABNAMES_RSP;
  static constexpr CMD_GET_ALL_TABNAMES_RSP UNKNOWN =
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_UNKNOWN;
  static constexpr CMD_GET_ALL_TABNAMES_RSP CMD =
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD;
  static inline bool CMD_GET_ALL_TABNAMES_RSP_IsValid(int value) {
    return PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_IsValid(value);
  }
  static constexpr CMD_GET_ALL_TABNAMES_RSP CMD_GET_ALL_TABNAMES_RSP_MIN =
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_MIN;
  static constexpr CMD_GET_ALL_TABNAMES_RSP CMD_GET_ALL_TABNAMES_RSP_MAX =
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_MAX;
  static constexpr int CMD_GET_ALL_TABNAMES_RSP_ARRAYSIZE =
    PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_ALL_TABNAMES_RSP_descriptor() {
    return PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_ALL_TABNAMES_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_ALL_TABNAMES_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_ALL_TABNAMES_RSP_Name.");
    return PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_Name(enum_t_value);
  }
  static inline bool CMD_GET_ALL_TABNAMES_RSP_Parse(const std::string& name,
      CMD_GET_ALL_TABNAMES_RSP* value) {
    return PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kDesesFieldNumber = 3,
    kErrmsgFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated string deses = 3;
  int deses_size() const;
  private:
  int _internal_deses_size() const;
  public:
  void clear_deses();
  const std::string& deses(int index) const;
  std::string* mutable_deses(int index);
  void set_deses(int index, const std::string& value);
  void set_deses(int index, std::string&& value);
  void set_deses(int index, const char* value);
  void set_deses(int index, const char* value, size_t size);
  std::string* add_deses();
  void add_deses(const std::string& value);
  void add_deses(std::string&& value);
  void add_deses(const char* value);
  void add_deses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deses();
  private:
  const std::string& _internal_deses(int index) const;
  std::string* _internal_add_deses();
  public:

  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_ALL_TABNAMES_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_OPEN_DB_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_OPEN_DB_REQ) */ {
 public:
  PK_OPEN_DB_REQ();
  virtual ~PK_OPEN_DB_REQ();

  PK_OPEN_DB_REQ(const PK_OPEN_DB_REQ& from);
  PK_OPEN_DB_REQ(PK_OPEN_DB_REQ&& from) noexcept
    : PK_OPEN_DB_REQ() {
    *this = ::std::move(from);
  }

  inline PK_OPEN_DB_REQ& operator=(const PK_OPEN_DB_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_OPEN_DB_REQ& operator=(PK_OPEN_DB_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_OPEN_DB_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_OPEN_DB_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_OPEN_DB_REQ*>(
               &_PK_OPEN_DB_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PK_OPEN_DB_REQ& a, PK_OPEN_DB_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_OPEN_DB_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_OPEN_DB_REQ* New() const final {
    return CreateMaybeMessage<PK_OPEN_DB_REQ>(nullptr);
  }

  PK_OPEN_DB_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_OPEN_DB_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_OPEN_DB_REQ& from);
  void MergeFrom(const PK_OPEN_DB_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_OPEN_DB_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_OPEN_DB_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ CMD_OPEN_DB_REQ;
  static constexpr CMD_OPEN_DB_REQ UNKNOWN =
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_UNKNOWN;
  static constexpr CMD_OPEN_DB_REQ CMD =
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD;
  static inline bool CMD_OPEN_DB_REQ_IsValid(int value) {
    return PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_IsValid(value);
  }
  static constexpr CMD_OPEN_DB_REQ CMD_OPEN_DB_REQ_MIN =
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_MIN;
  static constexpr CMD_OPEN_DB_REQ CMD_OPEN_DB_REQ_MAX =
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_MAX;
  static constexpr int CMD_OPEN_DB_REQ_ARRAYSIZE =
    PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_CMD_OPEN_DB_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_OPEN_DB_REQ_descriptor() {
    return PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_OPEN_DB_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_OPEN_DB_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_OPEN_DB_REQ_Name.");
    return PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_Name(enum_t_value);
  }
  static inline bool CMD_OPEN_DB_REQ_Parse(const std::string& name,
      CMD_OPEN_DB_REQ* value) {
    return PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kUsernameFieldNumber = 4,
    kPasswdFieldNumber = 5,
    kDbnameFieldNumber = 6,
    kPortFieldNumber = 3,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string username = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string passwd = 5;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // string dbname = 6;
  void clear_dbname();
  const std::string& dbname() const;
  void set_dbname(const std::string& value);
  void set_dbname(std::string&& value);
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  std::string* mutable_dbname();
  std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);
  private:
  const std::string& _internal_dbname() const;
  void _internal_set_dbname(const std::string& value);
  std::string* _internal_mutable_dbname();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_OPEN_DB_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_OPEN_DB_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_OPEN_DB_RSP) */ {
 public:
  PK_OPEN_DB_RSP();
  virtual ~PK_OPEN_DB_RSP();

  PK_OPEN_DB_RSP(const PK_OPEN_DB_RSP& from);
  PK_OPEN_DB_RSP(PK_OPEN_DB_RSP&& from) noexcept
    : PK_OPEN_DB_RSP() {
    *this = ::std::move(from);
  }

  inline PK_OPEN_DB_RSP& operator=(const PK_OPEN_DB_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_OPEN_DB_RSP& operator=(PK_OPEN_DB_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_OPEN_DB_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_OPEN_DB_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_OPEN_DB_RSP*>(
               &_PK_OPEN_DB_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PK_OPEN_DB_RSP& a, PK_OPEN_DB_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_OPEN_DB_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_OPEN_DB_RSP* New() const final {
    return CreateMaybeMessage<PK_OPEN_DB_RSP>(nullptr);
  }

  PK_OPEN_DB_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_OPEN_DB_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_OPEN_DB_RSP& from);
  void MergeFrom(const PK_OPEN_DB_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_OPEN_DB_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_OPEN_DB_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP CMD_OPEN_DB_RSP;
  static constexpr CMD_OPEN_DB_RSP UNKNOWN =
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_UNKNOWN;
  static constexpr CMD_OPEN_DB_RSP CMD =
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD;
  static inline bool CMD_OPEN_DB_RSP_IsValid(int value) {
    return PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_IsValid(value);
  }
  static constexpr CMD_OPEN_DB_RSP CMD_OPEN_DB_RSP_MIN =
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_MIN;
  static constexpr CMD_OPEN_DB_RSP CMD_OPEN_DB_RSP_MAX =
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_MAX;
  static constexpr int CMD_OPEN_DB_RSP_ARRAYSIZE =
    PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_CMD_OPEN_DB_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_OPEN_DB_RSP_descriptor() {
    return PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_OPEN_DB_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_OPEN_DB_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_OPEN_DB_RSP_Name.");
    return PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_Name(enum_t_value);
  }
  static inline bool CMD_OPEN_DB_RSP_Parse(const std::string& name,
      CMD_OPEN_DB_RSP* value) {
    return PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_OPEN_DB_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TABNAMES_PAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TABNAMES_PAGE_REQ) */ {
 public:
  PK_GET_TABNAMES_PAGE_REQ();
  virtual ~PK_GET_TABNAMES_PAGE_REQ();

  PK_GET_TABNAMES_PAGE_REQ(const PK_GET_TABNAMES_PAGE_REQ& from);
  PK_GET_TABNAMES_PAGE_REQ(PK_GET_TABNAMES_PAGE_REQ&& from) noexcept
    : PK_GET_TABNAMES_PAGE_REQ() {
    *this = ::std::move(from);
  }

  inline PK_GET_TABNAMES_PAGE_REQ& operator=(const PK_GET_TABNAMES_PAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TABNAMES_PAGE_REQ& operator=(PK_GET_TABNAMES_PAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TABNAMES_PAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TABNAMES_PAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TABNAMES_PAGE_REQ*>(
               &_PK_GET_TABNAMES_PAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PK_GET_TABNAMES_PAGE_REQ& a, PK_GET_TABNAMES_PAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TABNAMES_PAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TABNAMES_PAGE_REQ* New() const final {
    return CreateMaybeMessage<PK_GET_TABNAMES_PAGE_REQ>(nullptr);
  }

  PK_GET_TABNAMES_PAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TABNAMES_PAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TABNAMES_PAGE_REQ& from);
  void MergeFrom(const PK_GET_TABNAMES_PAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TABNAMES_PAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TABNAMES_PAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ CMD_GET_TABNAMES_PAGE_REQ;
  static constexpr CMD_GET_TABNAMES_PAGE_REQ UNKNOWN =
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_UNKNOWN;
  static constexpr CMD_GET_TABNAMES_PAGE_REQ CMD =
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD;
  static inline bool CMD_GET_TABNAMES_PAGE_REQ_IsValid(int value) {
    return PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_IsValid(value);
  }
  static constexpr CMD_GET_TABNAMES_PAGE_REQ CMD_GET_TABNAMES_PAGE_REQ_MIN =
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_MIN;
  static constexpr CMD_GET_TABNAMES_PAGE_REQ CMD_GET_TABNAMES_PAGE_REQ_MAX =
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_MAX;
  static constexpr int CMD_GET_TABNAMES_PAGE_REQ_ARRAYSIZE =
    PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TABNAMES_PAGE_REQ_descriptor() {
    return PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TABNAMES_PAGE_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TABNAMES_PAGE_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TABNAMES_PAGE_REQ_Name.");
    return PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_Name(enum_t_value);
  }
  static inline bool CMD_GET_TABNAMES_PAGE_REQ_Parse(const std::string& name,
      CMD_GET_TABNAMES_PAGE_REQ* value) {
    return PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 3,
    kPageFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string filter = 3;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // uint32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TABNAMES_PAGE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TABNAMES_PAGE_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TABNAMES_PAGE_RSP) */ {
 public:
  PK_GET_TABNAMES_PAGE_RSP();
  virtual ~PK_GET_TABNAMES_PAGE_RSP();

  PK_GET_TABNAMES_PAGE_RSP(const PK_GET_TABNAMES_PAGE_RSP& from);
  PK_GET_TABNAMES_PAGE_RSP(PK_GET_TABNAMES_PAGE_RSP&& from) noexcept
    : PK_GET_TABNAMES_PAGE_RSP() {
    *this = ::std::move(from);
  }

  inline PK_GET_TABNAMES_PAGE_RSP& operator=(const PK_GET_TABNAMES_PAGE_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TABNAMES_PAGE_RSP& operator=(PK_GET_TABNAMES_PAGE_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TABNAMES_PAGE_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TABNAMES_PAGE_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TABNAMES_PAGE_RSP*>(
               &_PK_GET_TABNAMES_PAGE_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PK_GET_TABNAMES_PAGE_RSP& a, PK_GET_TABNAMES_PAGE_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TABNAMES_PAGE_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TABNAMES_PAGE_RSP* New() const final {
    return CreateMaybeMessage<PK_GET_TABNAMES_PAGE_RSP>(nullptr);
  }

  PK_GET_TABNAMES_PAGE_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TABNAMES_PAGE_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TABNAMES_PAGE_RSP& from);
  void MergeFrom(const PK_GET_TABNAMES_PAGE_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TABNAMES_PAGE_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TABNAMES_PAGE_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP CMD_GET_TABNAMES_PAGE_RSP;
  static constexpr CMD_GET_TABNAMES_PAGE_RSP UNKNOWN =
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_UNKNOWN;
  static constexpr CMD_GET_TABNAMES_PAGE_RSP CMD =
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD;
  static inline bool CMD_GET_TABNAMES_PAGE_RSP_IsValid(int value) {
    return PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_IsValid(value);
  }
  static constexpr CMD_GET_TABNAMES_PAGE_RSP CMD_GET_TABNAMES_PAGE_RSP_MIN =
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_MIN;
  static constexpr CMD_GET_TABNAMES_PAGE_RSP CMD_GET_TABNAMES_PAGE_RSP_MAX =
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_MAX;
  static constexpr int CMD_GET_TABNAMES_PAGE_RSP_ARRAYSIZE =
    PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TABNAMES_PAGE_RSP_descriptor() {
    return PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TABNAMES_PAGE_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TABNAMES_PAGE_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TABNAMES_PAGE_RSP_Name.");
    return PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_Name(enum_t_value);
  }
  static inline bool CMD_GET_TABNAMES_PAGE_RSP_Parse(const std::string& name,
      CMD_GET_TABNAMES_PAGE_RSP* value) {
    return PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 3,
    kDesesFieldNumber = 4,
    kErrmsgFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // repeated string names = 3;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated string deses = 4;
  int deses_size() const;
  private:
  int _internal_deses_size() const;
  public:
  void clear_deses();
  const std::string& deses(int index) const;
  std::string* mutable_deses(int index);
  void set_deses(int index, const std::string& value);
  void set_deses(int index, std::string&& value);
  void set_deses(int index, const char* value);
  void set_deses(int index, const char* value, size_t size);
  std::string* add_deses();
  void add_deses(const std::string& value);
  void add_deses(std::string&& value);
  void add_deses(const char* value);
  void add_deses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deses();
  private:
  const std::string& _internal_deses(int index) const;
  std::string* _internal_add_deses();
  public:

  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TABNAMES_PAGE_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TAB_SQL_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TAB_SQL_REQ) */ {
 public:
  PK_GET_TAB_SQL_REQ();
  virtual ~PK_GET_TAB_SQL_REQ();

  PK_GET_TAB_SQL_REQ(const PK_GET_TAB_SQL_REQ& from);
  PK_GET_TAB_SQL_REQ(PK_GET_TAB_SQL_REQ&& from) noexcept
    : PK_GET_TAB_SQL_REQ() {
    *this = ::std::move(from);
  }

  inline PK_GET_TAB_SQL_REQ& operator=(const PK_GET_TAB_SQL_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TAB_SQL_REQ& operator=(PK_GET_TAB_SQL_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TAB_SQL_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TAB_SQL_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TAB_SQL_REQ*>(
               &_PK_GET_TAB_SQL_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PK_GET_TAB_SQL_REQ& a, PK_GET_TAB_SQL_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TAB_SQL_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TAB_SQL_REQ* New() const final {
    return CreateMaybeMessage<PK_GET_TAB_SQL_REQ>(nullptr);
  }

  PK_GET_TAB_SQL_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TAB_SQL_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TAB_SQL_REQ& from);
  void MergeFrom(const PK_GET_TAB_SQL_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TAB_SQL_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TAB_SQL_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ CMD_GET_TAB_SQL_REQ;
  static constexpr CMD_GET_TAB_SQL_REQ UNKNOWN =
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_UNKNOWN;
  static constexpr CMD_GET_TAB_SQL_REQ CMD =
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD;
  static inline bool CMD_GET_TAB_SQL_REQ_IsValid(int value) {
    return PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_IsValid(value);
  }
  static constexpr CMD_GET_TAB_SQL_REQ CMD_GET_TAB_SQL_REQ_MIN =
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_MIN;
  static constexpr CMD_GET_TAB_SQL_REQ CMD_GET_TAB_SQL_REQ_MAX =
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_MAX;
  static constexpr int CMD_GET_TAB_SQL_REQ_ARRAYSIZE =
    PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TAB_SQL_REQ_descriptor() {
    return PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TAB_SQL_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TAB_SQL_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TAB_SQL_REQ_Name.");
    return PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_Name(enum_t_value);
  }
  static inline bool CMD_GET_TAB_SQL_REQ_Parse(const std::string& name,
      CMD_GET_TAB_SQL_REQ* value) {
    return PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTabnameFieldNumber = 1,
  };
  // string tabname = 1;
  void clear_tabname();
  const std::string& tabname() const;
  void set_tabname(const std::string& value);
  void set_tabname(std::string&& value);
  void set_tabname(const char* value);
  void set_tabname(const char* value, size_t size);
  std::string* mutable_tabname();
  std::string* release_tabname();
  void set_allocated_tabname(std::string* tabname);
  private:
  const std::string& _internal_tabname() const;
  void _internal_set_tabname(const std::string& value);
  std::string* _internal_mutable_tabname();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TAB_SQL_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tabname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TAB_SQL_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TAB_SQL_RSP) */ {
 public:
  PK_GET_TAB_SQL_RSP();
  virtual ~PK_GET_TAB_SQL_RSP();

  PK_GET_TAB_SQL_RSP(const PK_GET_TAB_SQL_RSP& from);
  PK_GET_TAB_SQL_RSP(PK_GET_TAB_SQL_RSP&& from) noexcept
    : PK_GET_TAB_SQL_RSP() {
    *this = ::std::move(from);
  }

  inline PK_GET_TAB_SQL_RSP& operator=(const PK_GET_TAB_SQL_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TAB_SQL_RSP& operator=(PK_GET_TAB_SQL_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TAB_SQL_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TAB_SQL_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TAB_SQL_RSP*>(
               &_PK_GET_TAB_SQL_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PK_GET_TAB_SQL_RSP& a, PK_GET_TAB_SQL_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TAB_SQL_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TAB_SQL_RSP* New() const final {
    return CreateMaybeMessage<PK_GET_TAB_SQL_RSP>(nullptr);
  }

  PK_GET_TAB_SQL_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TAB_SQL_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TAB_SQL_RSP& from);
  void MergeFrom(const PK_GET_TAB_SQL_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TAB_SQL_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TAB_SQL_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP CMD_GET_TAB_SQL_RSP;
  static constexpr CMD_GET_TAB_SQL_RSP UNKNOWN =
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_UNKNOWN;
  static constexpr CMD_GET_TAB_SQL_RSP CMD =
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD;
  static inline bool CMD_GET_TAB_SQL_RSP_IsValid(int value) {
    return PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_IsValid(value);
  }
  static constexpr CMD_GET_TAB_SQL_RSP CMD_GET_TAB_SQL_RSP_MIN =
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_MIN;
  static constexpr CMD_GET_TAB_SQL_RSP CMD_GET_TAB_SQL_RSP_MAX =
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_MAX;
  static constexpr int CMD_GET_TAB_SQL_RSP_ARRAYSIZE =
    PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TAB_SQL_RSP_descriptor() {
    return PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TAB_SQL_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TAB_SQL_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TAB_SQL_RSP_Name.");
    return PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_Name(enum_t_value);
  }
  static inline bool CMD_GET_TAB_SQL_RSP_Parse(const std::string& name,
      CMD_GET_TAB_SQL_RSP* value) {
    return PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
    kSqlFieldNumber = 2,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string sql = 2;
  void clear_sql();
  const std::string& sql() const;
  void set_sql(const std::string& value);
  void set_sql(std::string&& value);
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  std::string* mutable_sql();
  std::string* release_sql();
  void set_allocated_sql(std::string* sql);
  private:
  const std::string& _internal_sql() const;
  void _internal_set_sql(const std::string& value);
  std::string* _internal_mutable_sql();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TAB_SQL_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TAB_MODEL_CODE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TAB_MODEL_CODE_REQ) */ {
 public:
  PK_GET_TAB_MODEL_CODE_REQ();
  virtual ~PK_GET_TAB_MODEL_CODE_REQ();

  PK_GET_TAB_MODEL_CODE_REQ(const PK_GET_TAB_MODEL_CODE_REQ& from);
  PK_GET_TAB_MODEL_CODE_REQ(PK_GET_TAB_MODEL_CODE_REQ&& from) noexcept
    : PK_GET_TAB_MODEL_CODE_REQ() {
    *this = ::std::move(from);
  }

  inline PK_GET_TAB_MODEL_CODE_REQ& operator=(const PK_GET_TAB_MODEL_CODE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TAB_MODEL_CODE_REQ& operator=(PK_GET_TAB_MODEL_CODE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TAB_MODEL_CODE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TAB_MODEL_CODE_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TAB_MODEL_CODE_REQ*>(
               &_PK_GET_TAB_MODEL_CODE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PK_GET_TAB_MODEL_CODE_REQ& a, PK_GET_TAB_MODEL_CODE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TAB_MODEL_CODE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TAB_MODEL_CODE_REQ* New() const final {
    return CreateMaybeMessage<PK_GET_TAB_MODEL_CODE_REQ>(nullptr);
  }

  PK_GET_TAB_MODEL_CODE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TAB_MODEL_CODE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TAB_MODEL_CODE_REQ& from);
  void MergeFrom(const PK_GET_TAB_MODEL_CODE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TAB_MODEL_CODE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TAB_MODEL_CODE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ CMD_GET_TAB_MODEL_CODE_REQ;
  static constexpr CMD_GET_TAB_MODEL_CODE_REQ UNKNOWN =
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_UNKNOWN;
  static constexpr CMD_GET_TAB_MODEL_CODE_REQ CMD =
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD;
  static inline bool CMD_GET_TAB_MODEL_CODE_REQ_IsValid(int value) {
    return PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_IsValid(value);
  }
  static constexpr CMD_GET_TAB_MODEL_CODE_REQ CMD_GET_TAB_MODEL_CODE_REQ_MIN =
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_MIN;
  static constexpr CMD_GET_TAB_MODEL_CODE_REQ CMD_GET_TAB_MODEL_CODE_REQ_MAX =
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_MAX;
  static constexpr int CMD_GET_TAB_MODEL_CODE_REQ_ARRAYSIZE =
    PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TAB_MODEL_CODE_REQ_descriptor() {
    return PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TAB_MODEL_CODE_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TAB_MODEL_CODE_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TAB_MODEL_CODE_REQ_Name.");
    return PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_Name(enum_t_value);
  }
  static inline bool CMD_GET_TAB_MODEL_CODE_REQ_Parse(const std::string& name,
      CMD_GET_TAB_MODEL_CODE_REQ* value) {
    return PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTabnameFieldNumber = 1,
    kPrefixFieldNumber = 2,
  };
  // string tabname = 1;
  void clear_tabname();
  const std::string& tabname() const;
  void set_tabname(const std::string& value);
  void set_tabname(std::string&& value);
  void set_tabname(const char* value);
  void set_tabname(const char* value, size_t size);
  std::string* mutable_tabname();
  std::string* release_tabname();
  void set_allocated_tabname(std::string* tabname);
  private:
  const std::string& _internal_tabname() const;
  void _internal_set_tabname(const std::string& value);
  std::string* _internal_mutable_tabname();
  public:

  // string prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tabname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_GET_TAB_MODEL_CODE_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_GET_TAB_MODEL_CODE_RSP) */ {
 public:
  PK_GET_TAB_MODEL_CODE_RSP();
  virtual ~PK_GET_TAB_MODEL_CODE_RSP();

  PK_GET_TAB_MODEL_CODE_RSP(const PK_GET_TAB_MODEL_CODE_RSP& from);
  PK_GET_TAB_MODEL_CODE_RSP(PK_GET_TAB_MODEL_CODE_RSP&& from) noexcept
    : PK_GET_TAB_MODEL_CODE_RSP() {
    *this = ::std::move(from);
  }

  inline PK_GET_TAB_MODEL_CODE_RSP& operator=(const PK_GET_TAB_MODEL_CODE_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_GET_TAB_MODEL_CODE_RSP& operator=(PK_GET_TAB_MODEL_CODE_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_GET_TAB_MODEL_CODE_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_GET_TAB_MODEL_CODE_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_GET_TAB_MODEL_CODE_RSP*>(
               &_PK_GET_TAB_MODEL_CODE_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PK_GET_TAB_MODEL_CODE_RSP& a, PK_GET_TAB_MODEL_CODE_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_GET_TAB_MODEL_CODE_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_GET_TAB_MODEL_CODE_RSP* New() const final {
    return CreateMaybeMessage<PK_GET_TAB_MODEL_CODE_RSP>(nullptr);
  }

  PK_GET_TAB_MODEL_CODE_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_GET_TAB_MODEL_CODE_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_GET_TAB_MODEL_CODE_RSP& from);
  void MergeFrom(const PK_GET_TAB_MODEL_CODE_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_GET_TAB_MODEL_CODE_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_GET_TAB_MODEL_CODE_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP CMD_GET_TAB_MODEL_CODE_RSP;
  static constexpr CMD_GET_TAB_MODEL_CODE_RSP UNKNOWN =
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_UNKNOWN;
  static constexpr CMD_GET_TAB_MODEL_CODE_RSP CMD =
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD;
  static inline bool CMD_GET_TAB_MODEL_CODE_RSP_IsValid(int value) {
    return PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_IsValid(value);
  }
  static constexpr CMD_GET_TAB_MODEL_CODE_RSP CMD_GET_TAB_MODEL_CODE_RSP_MIN =
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_MIN;
  static constexpr CMD_GET_TAB_MODEL_CODE_RSP CMD_GET_TAB_MODEL_CODE_RSP_MAX =
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_MAX;
  static constexpr int CMD_GET_TAB_MODEL_CODE_RSP_ARRAYSIZE =
    PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_GET_TAB_MODEL_CODE_RSP_descriptor() {
    return PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_GET_TAB_MODEL_CODE_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_GET_TAB_MODEL_CODE_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_GET_TAB_MODEL_CODE_RSP_Name.");
    return PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_Name(enum_t_value);
  }
  static inline bool CMD_GET_TAB_MODEL_CODE_RSP_Parse(const std::string& name,
      CMD_GET_TAB_MODEL_CODE_RSP* value) {
    return PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_SET_LOG_DIR_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_SET_LOG_DIR_REQ) */ {
 public:
  PK_SET_LOG_DIR_REQ();
  virtual ~PK_SET_LOG_DIR_REQ();

  PK_SET_LOG_DIR_REQ(const PK_SET_LOG_DIR_REQ& from);
  PK_SET_LOG_DIR_REQ(PK_SET_LOG_DIR_REQ&& from) noexcept
    : PK_SET_LOG_DIR_REQ() {
    *this = ::std::move(from);
  }

  inline PK_SET_LOG_DIR_REQ& operator=(const PK_SET_LOG_DIR_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_SET_LOG_DIR_REQ& operator=(PK_SET_LOG_DIR_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_SET_LOG_DIR_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_SET_LOG_DIR_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_SET_LOG_DIR_REQ*>(
               &_PK_SET_LOG_DIR_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PK_SET_LOG_DIR_REQ& a, PK_SET_LOG_DIR_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_SET_LOG_DIR_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_SET_LOG_DIR_REQ* New() const final {
    return CreateMaybeMessage<PK_SET_LOG_DIR_REQ>(nullptr);
  }

  PK_SET_LOG_DIR_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_SET_LOG_DIR_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_SET_LOG_DIR_REQ& from);
  void MergeFrom(const PK_SET_LOG_DIR_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_SET_LOG_DIR_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_SET_LOG_DIR_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ CMD_SET_LOG_DIR_REQ;
  static constexpr CMD_SET_LOG_DIR_REQ UNKNOWN =
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_UNKNOWN;
  static constexpr CMD_SET_LOG_DIR_REQ CMD =
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD;
  static inline bool CMD_SET_LOG_DIR_REQ_IsValid(int value) {
    return PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_IsValid(value);
  }
  static constexpr CMD_SET_LOG_DIR_REQ CMD_SET_LOG_DIR_REQ_MIN =
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_MIN;
  static constexpr CMD_SET_LOG_DIR_REQ CMD_SET_LOG_DIR_REQ_MAX =
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_MAX;
  static constexpr int CMD_SET_LOG_DIR_REQ_ARRAYSIZE =
    PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_SET_LOG_DIR_REQ_descriptor() {
    return PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_SET_LOG_DIR_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_SET_LOG_DIR_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_SET_LOG_DIR_REQ_Name.");
    return PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_Name(enum_t_value);
  }
  static inline bool CMD_SET_LOG_DIR_REQ_Parse(const std::string& name,
      CMD_SET_LOG_DIR_REQ* value) {
    return PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
  };
  // string dir = 1;
  void clear_dir();
  const std::string& dir() const;
  void set_dir(const std::string& value);
  void set_dir(std::string&& value);
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  std::string* mutable_dir();
  std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_SET_LOG_DIR_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_SET_LOG_DIR_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbapi.PK_SET_LOG_DIR_RSP) */ {
 public:
  PK_SET_LOG_DIR_RSP();
  virtual ~PK_SET_LOG_DIR_RSP();

  PK_SET_LOG_DIR_RSP(const PK_SET_LOG_DIR_RSP& from);
  PK_SET_LOG_DIR_RSP(PK_SET_LOG_DIR_RSP&& from) noexcept
    : PK_SET_LOG_DIR_RSP() {
    *this = ::std::move(from);
  }

  inline PK_SET_LOG_DIR_RSP& operator=(const PK_SET_LOG_DIR_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_SET_LOG_DIR_RSP& operator=(PK_SET_LOG_DIR_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_SET_LOG_DIR_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_SET_LOG_DIR_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_SET_LOG_DIR_RSP*>(
               &_PK_SET_LOG_DIR_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PK_SET_LOG_DIR_RSP& a, PK_SET_LOG_DIR_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_SET_LOG_DIR_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_SET_LOG_DIR_RSP* New() const final {
    return CreateMaybeMessage<PK_SET_LOG_DIR_RSP>(nullptr);
  }

  PK_SET_LOG_DIR_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_SET_LOG_DIR_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_SET_LOG_DIR_RSP& from);
  void MergeFrom(const PK_SET_LOG_DIR_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_SET_LOG_DIR_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbapi.PK_SET_LOG_DIR_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP CMD_SET_LOG_DIR_RSP;
  static constexpr CMD_SET_LOG_DIR_RSP UNKNOWN =
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_UNKNOWN;
  static constexpr CMD_SET_LOG_DIR_RSP CMD =
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD;
  static inline bool CMD_SET_LOG_DIR_RSP_IsValid(int value) {
    return PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_IsValid(value);
  }
  static constexpr CMD_SET_LOG_DIR_RSP CMD_SET_LOG_DIR_RSP_MIN =
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_MIN;
  static constexpr CMD_SET_LOG_DIR_RSP CMD_SET_LOG_DIR_RSP_MAX =
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_MAX;
  static constexpr int CMD_SET_LOG_DIR_RSP_ARRAYSIZE =
    PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_SET_LOG_DIR_RSP_descriptor() {
    return PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_SET_LOG_DIR_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_SET_LOG_DIR_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_SET_LOG_DIR_RSP_Name.");
    return PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_Name(enum_t_value);
  }
  static inline bool CMD_SET_LOG_DIR_RSP_Parse(const std::string& name,
      CMD_SET_LOG_DIR_RSP* value) {
    return PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbapi.PK_SET_LOG_DIR_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PK_KEEPALIVE_REQ

// -------------------------------------------------------------------

// PK_KEEPALIVE_RSP

// -------------------------------------------------------------------

// PK_USER_LOGIN_REQ

// string name = 1;
inline void PK_USER_LOGIN_REQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_USER_LOGIN_REQ::name() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_USER_LOGIN_REQ.name)
  return _internal_name();
}
inline void PK_USER_LOGIN_REQ::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_USER_LOGIN_REQ.name)
}
inline std::string* PK_USER_LOGIN_REQ::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_USER_LOGIN_REQ.name)
  return _internal_mutable_name();
}
inline const std::string& PK_USER_LOGIN_REQ::_internal_name() const {
  return name_.GetNoArena();
}
inline void PK_USER_LOGIN_REQ::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_USER_LOGIN_REQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_USER_LOGIN_REQ.name)
}
inline void PK_USER_LOGIN_REQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_USER_LOGIN_REQ.name)
}
inline void PK_USER_LOGIN_REQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_USER_LOGIN_REQ.name)
}
inline std::string* PK_USER_LOGIN_REQ::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_USER_LOGIN_REQ::release_name() {
  // @@protoc_insertion_point(field_release:pbapi.PK_USER_LOGIN_REQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_USER_LOGIN_REQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_USER_LOGIN_REQ.name)
}

// string pwd = 2;
inline void PK_USER_LOGIN_REQ::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_USER_LOGIN_REQ::pwd() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_USER_LOGIN_REQ.pwd)
  return _internal_pwd();
}
inline void PK_USER_LOGIN_REQ::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_USER_LOGIN_REQ.pwd)
}
inline std::string* PK_USER_LOGIN_REQ::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_USER_LOGIN_REQ.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& PK_USER_LOGIN_REQ::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void PK_USER_LOGIN_REQ::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_USER_LOGIN_REQ::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_USER_LOGIN_REQ.pwd)
}
inline void PK_USER_LOGIN_REQ::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_USER_LOGIN_REQ.pwd)
}
inline void PK_USER_LOGIN_REQ::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_USER_LOGIN_REQ.pwd)
}
inline std::string* PK_USER_LOGIN_REQ::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_USER_LOGIN_REQ::release_pwd() {
  // @@protoc_insertion_point(field_release:pbapi.PK_USER_LOGIN_REQ.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_USER_LOGIN_REQ::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_USER_LOGIN_REQ.pwd)
}

// -------------------------------------------------------------------

// PK_USER_LOGIN_RSP

// string errMsg = 1;
inline void PK_USER_LOGIN_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_USER_LOGIN_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_USER_LOGIN_RSP.errMsg)
  return _internal_errmsg();
}
inline void PK_USER_LOGIN_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_USER_LOGIN_RSP.errMsg)
}
inline std::string* PK_USER_LOGIN_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_USER_LOGIN_RSP.errMsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_USER_LOGIN_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_USER_LOGIN_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_USER_LOGIN_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_USER_LOGIN_RSP.errMsg)
}
inline void PK_USER_LOGIN_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_USER_LOGIN_RSP.errMsg)
}
inline void PK_USER_LOGIN_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_USER_LOGIN_RSP.errMsg)
}
inline std::string* PK_USER_LOGIN_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_USER_LOGIN_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_USER_LOGIN_RSP.errMsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_USER_LOGIN_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_USER_LOGIN_RSP.errMsg)
}

// -------------------------------------------------------------------

// PK_GET_ALL_TABNAMES_REQ

// -------------------------------------------------------------------

// PK_GET_ALL_TABNAMES_RSP

// string errmsg = 1;
inline void PK_GET_ALL_TABNAMES_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_GET_ALL_TABNAMES_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_GET_ALL_TABNAMES_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_ALL_TABNAMES_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
}
inline void PK_GET_ALL_TABNAMES_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
}
inline void PK_GET_ALL_TABNAMES_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_ALL_TABNAMES_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg)
}

// repeated string names = 2;
inline int PK_GET_ALL_TABNAMES_RSP::_internal_names_size() const {
  return names_.size();
}
inline int PK_GET_ALL_TABNAMES_RSP::names_size() const {
  return _internal_names_size();
}
inline void PK_GET_ALL_TABNAMES_RSP::clear_names() {
  names_.Clear();
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::add_names() {
  // @@protoc_insertion_point(field_add_mutable:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  return _internal_add_names();
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::names(int index) const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  return _internal_names(index);
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  return names_.Mutable(index);
}
inline void PK_GET_ALL_TABNAMES_RSP::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  names_.Mutable(index)->assign(value);
}
inline void PK_GET_ALL_TABNAMES_RSP::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void PK_GET_ALL_TABNAMES_RSP::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline void PK_GET_ALL_TABNAMES_RSP::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::_internal_add_names() {
  return names_.Add();
}
inline void PK_GET_ALL_TABNAMES_RSP::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PK_GET_ALL_TABNAMES_RSP::names() const {
  // @@protoc_insertion_point(field_list:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PK_GET_ALL_TABNAMES_RSP::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pbapi.PK_GET_ALL_TABNAMES_RSP.names)
  return &names_;
}

// repeated string deses = 3;
inline int PK_GET_ALL_TABNAMES_RSP::_internal_deses_size() const {
  return deses_.size();
}
inline int PK_GET_ALL_TABNAMES_RSP::deses_size() const {
  return _internal_deses_size();
}
inline void PK_GET_ALL_TABNAMES_RSP::clear_deses() {
  deses_.Clear();
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::add_deses() {
  // @@protoc_insertion_point(field_add_mutable:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  return _internal_add_deses();
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::_internal_deses(int index) const {
  return deses_.Get(index);
}
inline const std::string& PK_GET_ALL_TABNAMES_RSP::deses(int index) const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  return _internal_deses(index);
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::mutable_deses(int index) {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  return deses_.Mutable(index);
}
inline void PK_GET_ALL_TABNAMES_RSP::set_deses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  deses_.Mutable(index)->assign(value);
}
inline void PK_GET_ALL_TABNAMES_RSP::set_deses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  deses_.Mutable(index)->assign(std::move(value));
}
inline void PK_GET_ALL_TABNAMES_RSP::set_deses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline void PK_GET_ALL_TABNAMES_RSP::set_deses(int index, const char* value, size_t size) {
  deses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline std::string* PK_GET_ALL_TABNAMES_RSP::_internal_add_deses() {
  return deses_.Add();
}
inline void PK_GET_ALL_TABNAMES_RSP::add_deses(const std::string& value) {
  deses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_deses(std::string&& value) {
  deses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_deses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline void PK_GET_ALL_TABNAMES_RSP::add_deses(const char* value, size_t size) {
  deses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PK_GET_ALL_TABNAMES_RSP::deses() const {
  // @@protoc_insertion_point(field_list:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  return deses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PK_GET_ALL_TABNAMES_RSP::mutable_deses() {
  // @@protoc_insertion_point(field_mutable_list:pbapi.PK_GET_ALL_TABNAMES_RSP.deses)
  return &deses_;
}

// -------------------------------------------------------------------

// PK_OPEN_DB_REQ

// string host = 2;
inline void PK_OPEN_DB_REQ::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_OPEN_DB_REQ::host() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_REQ.host)
  return _internal_host();
}
inline void PK_OPEN_DB_REQ::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_REQ.host)
}
inline std::string* PK_OPEN_DB_REQ::mutable_host() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_OPEN_DB_REQ.host)
  return _internal_mutable_host();
}
inline const std::string& PK_OPEN_DB_REQ::_internal_host() const {
  return host_.GetNoArena();
}
inline void PK_OPEN_DB_REQ::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_OPEN_DB_REQ::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_OPEN_DB_REQ.host)
}
inline void PK_OPEN_DB_REQ::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_OPEN_DB_REQ.host)
}
inline void PK_OPEN_DB_REQ::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_OPEN_DB_REQ.host)
}
inline std::string* PK_OPEN_DB_REQ::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_OPEN_DB_REQ::release_host() {
  // @@protoc_insertion_point(field_release:pbapi.PK_OPEN_DB_REQ.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_OPEN_DB_REQ::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_OPEN_DB_REQ.host)
}

// uint32 port = 3;
inline void PK_OPEN_DB_REQ::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_OPEN_DB_REQ::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_OPEN_DB_REQ::port() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_REQ.port)
  return _internal_port();
}
inline void PK_OPEN_DB_REQ::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void PK_OPEN_DB_REQ::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_REQ.port)
}

// string username = 4;
inline void PK_OPEN_DB_REQ::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_OPEN_DB_REQ::username() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_REQ.username)
  return _internal_username();
}
inline void PK_OPEN_DB_REQ::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_REQ.username)
}
inline std::string* PK_OPEN_DB_REQ::mutable_username() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_OPEN_DB_REQ.username)
  return _internal_mutable_username();
}
inline const std::string& PK_OPEN_DB_REQ::_internal_username() const {
  return username_.GetNoArena();
}
inline void PK_OPEN_DB_REQ::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_OPEN_DB_REQ::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_OPEN_DB_REQ.username)
}
inline void PK_OPEN_DB_REQ::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_OPEN_DB_REQ.username)
}
inline void PK_OPEN_DB_REQ::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_OPEN_DB_REQ.username)
}
inline std::string* PK_OPEN_DB_REQ::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_OPEN_DB_REQ::release_username() {
  // @@protoc_insertion_point(field_release:pbapi.PK_OPEN_DB_REQ.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_OPEN_DB_REQ::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_OPEN_DB_REQ.username)
}

// string passwd = 5;
inline void PK_OPEN_DB_REQ::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_OPEN_DB_REQ::passwd() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_REQ.passwd)
  return _internal_passwd();
}
inline void PK_OPEN_DB_REQ::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_REQ.passwd)
}
inline std::string* PK_OPEN_DB_REQ::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_OPEN_DB_REQ.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& PK_OPEN_DB_REQ::_internal_passwd() const {
  return passwd_.GetNoArena();
}
inline void PK_OPEN_DB_REQ::_internal_set_passwd(const std::string& value) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_OPEN_DB_REQ::set_passwd(std::string&& value) {
  
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_OPEN_DB_REQ.passwd)
}
inline void PK_OPEN_DB_REQ::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_OPEN_DB_REQ.passwd)
}
inline void PK_OPEN_DB_REQ::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_OPEN_DB_REQ.passwd)
}
inline std::string* PK_OPEN_DB_REQ::_internal_mutable_passwd() {
  
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_OPEN_DB_REQ::release_passwd() {
  // @@protoc_insertion_point(field_release:pbapi.PK_OPEN_DB_REQ.passwd)
  
  return passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_OPEN_DB_REQ::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_OPEN_DB_REQ.passwd)
}

// string dbname = 6;
inline void PK_OPEN_DB_REQ::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_OPEN_DB_REQ::dbname() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_REQ.dbname)
  return _internal_dbname();
}
inline void PK_OPEN_DB_REQ::set_dbname(const std::string& value) {
  _internal_set_dbname(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_REQ.dbname)
}
inline std::string* PK_OPEN_DB_REQ::mutable_dbname() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_OPEN_DB_REQ.dbname)
  return _internal_mutable_dbname();
}
inline const std::string& PK_OPEN_DB_REQ::_internal_dbname() const {
  return dbname_.GetNoArena();
}
inline void PK_OPEN_DB_REQ::_internal_set_dbname(const std::string& value) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_OPEN_DB_REQ::set_dbname(std::string&& value) {
  
  dbname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_OPEN_DB_REQ.dbname)
}
inline void PK_OPEN_DB_REQ::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_OPEN_DB_REQ.dbname)
}
inline void PK_OPEN_DB_REQ::set_dbname(const char* value, size_t size) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_OPEN_DB_REQ.dbname)
}
inline std::string* PK_OPEN_DB_REQ::_internal_mutable_dbname() {
  
  return dbname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_OPEN_DB_REQ::release_dbname() {
  // @@protoc_insertion_point(field_release:pbapi.PK_OPEN_DB_REQ.dbname)
  
  return dbname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_OPEN_DB_REQ::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  dbname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_OPEN_DB_REQ.dbname)
}

// -------------------------------------------------------------------

// PK_OPEN_DB_RSP

// string errmsg = 1;
inline void PK_OPEN_DB_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_OPEN_DB_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_OPEN_DB_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_OPEN_DB_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_OPEN_DB_RSP.errmsg)
}
inline std::string* PK_OPEN_DB_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_OPEN_DB_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_OPEN_DB_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_OPEN_DB_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_OPEN_DB_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_OPEN_DB_RSP.errmsg)
}
inline void PK_OPEN_DB_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_OPEN_DB_RSP.errmsg)
}
inline void PK_OPEN_DB_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_OPEN_DB_RSP.errmsg)
}
inline std::string* PK_OPEN_DB_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_OPEN_DB_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_OPEN_DB_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_OPEN_DB_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_OPEN_DB_RSP.errmsg)
}

// -------------------------------------------------------------------

// PK_GET_TABNAMES_PAGE_REQ

// uint32 page = 1;
inline void PK_GET_TABNAMES_PAGE_REQ::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_REQ::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_REQ::page() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_REQ.page)
  return _internal_page();
}
inline void PK_GET_TABNAMES_PAGE_REQ::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_REQ.page)
}

// uint32 limit = 2;
inline void PK_GET_TABNAMES_PAGE_REQ::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_REQ::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_REQ::limit() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_REQ.limit)
  return _internal_limit();
}
inline void PK_GET_TABNAMES_PAGE_REQ::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_REQ.limit)
}

// string filter = 3;
inline void PK_GET_TABNAMES_PAGE_REQ::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TABNAMES_PAGE_REQ::filter() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
  return _internal_filter();
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
}
inline std::string* PK_GET_TABNAMES_PAGE_REQ::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
  return _internal_mutable_filter();
}
inline const std::string& PK_GET_TABNAMES_PAGE_REQ::_internal_filter() const {
  return filter_.GetNoArena();
}
inline void PK_GET_TABNAMES_PAGE_REQ::_internal_set_filter(const std::string& value) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_filter(std::string&& value) {
  
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
}
inline std::string* PK_GET_TABNAMES_PAGE_REQ::_internal_mutable_filter() {
  
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TABNAMES_PAGE_REQ::release_filter() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
  
  return filter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TABNAMES_PAGE_REQ::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TABNAMES_PAGE_REQ.filter)
}

// -------------------------------------------------------------------

// PK_GET_TABNAMES_PAGE_RSP

// string errmsg = 1;
inline void PK_GET_TABNAMES_PAGE_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_GET_TABNAMES_PAGE_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg)
}

// uint32 total = 2;
inline void PK_GET_TABNAMES_PAGE_RSP::clear_total() {
  total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_RSP::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PK_GET_TABNAMES_PAGE_RSP::total() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_RSP.total)
  return _internal_total();
}
inline void PK_GET_TABNAMES_PAGE_RSP::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ = value;
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.total)
}

// repeated string names = 3;
inline int PK_GET_TABNAMES_PAGE_RSP::_internal_names_size() const {
  return names_.size();
}
inline int PK_GET_TABNAMES_PAGE_RSP::names_size() const {
  return _internal_names_size();
}
inline void PK_GET_TABNAMES_PAGE_RSP::clear_names() {
  names_.Clear();
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::add_names() {
  // @@protoc_insertion_point(field_add_mutable:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  return _internal_add_names();
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::names(int index) const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  return _internal_names(index);
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  return names_.Mutable(index);
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  names_.Mutable(index)->assign(value);
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::_internal_add_names() {
  return names_.Add();
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PK_GET_TABNAMES_PAGE_RSP::names() const {
  // @@protoc_insertion_point(field_list:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PK_GET_TABNAMES_PAGE_RSP::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pbapi.PK_GET_TABNAMES_PAGE_RSP.names)
  return &names_;
}

// repeated string deses = 4;
inline int PK_GET_TABNAMES_PAGE_RSP::_internal_deses_size() const {
  return deses_.size();
}
inline int PK_GET_TABNAMES_PAGE_RSP::deses_size() const {
  return _internal_deses_size();
}
inline void PK_GET_TABNAMES_PAGE_RSP::clear_deses() {
  deses_.Clear();
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::add_deses() {
  // @@protoc_insertion_point(field_add_mutable:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  return _internal_add_deses();
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::_internal_deses(int index) const {
  return deses_.Get(index);
}
inline const std::string& PK_GET_TABNAMES_PAGE_RSP::deses(int index) const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  return _internal_deses(index);
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::mutable_deses(int index) {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  return deses_.Mutable(index);
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_deses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  deses_.Mutable(index)->assign(value);
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_deses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  deses_.Mutable(index)->assign(std::move(value));
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_deses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline void PK_GET_TABNAMES_PAGE_RSP::set_deses(int index, const char* value, size_t size) {
  deses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline std::string* PK_GET_TABNAMES_PAGE_RSP::_internal_add_deses() {
  return deses_.Add();
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_deses(const std::string& value) {
  deses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_deses(std::string&& value) {
  deses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_deses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline void PK_GET_TABNAMES_PAGE_RSP::add_deses(const char* value, size_t size) {
  deses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PK_GET_TABNAMES_PAGE_RSP::deses() const {
  // @@protoc_insertion_point(field_list:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  return deses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PK_GET_TABNAMES_PAGE_RSP::mutable_deses() {
  // @@protoc_insertion_point(field_mutable_list:pbapi.PK_GET_TABNAMES_PAGE_RSP.deses)
  return &deses_;
}

// -------------------------------------------------------------------

// PK_GET_TAB_SQL_REQ

// string tabname = 1;
inline void PK_GET_TAB_SQL_REQ::clear_tabname() {
  tabname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_SQL_REQ::tabname() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_SQL_REQ.tabname)
  return _internal_tabname();
}
inline void PK_GET_TAB_SQL_REQ::set_tabname(const std::string& value) {
  _internal_set_tabname(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_SQL_REQ.tabname)
}
inline std::string* PK_GET_TAB_SQL_REQ::mutable_tabname() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_SQL_REQ.tabname)
  return _internal_mutable_tabname();
}
inline const std::string& PK_GET_TAB_SQL_REQ::_internal_tabname() const {
  return tabname_.GetNoArena();
}
inline void PK_GET_TAB_SQL_REQ::_internal_set_tabname(const std::string& value) {
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_SQL_REQ::set_tabname(std::string&& value) {
  
  tabname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_SQL_REQ.tabname)
}
inline void PK_GET_TAB_SQL_REQ::set_tabname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_SQL_REQ.tabname)
}
inline void PK_GET_TAB_SQL_REQ::set_tabname(const char* value, size_t size) {
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_SQL_REQ.tabname)
}
inline std::string* PK_GET_TAB_SQL_REQ::_internal_mutable_tabname() {
  
  return tabname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_SQL_REQ::release_tabname() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_SQL_REQ.tabname)
  
  return tabname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_SQL_REQ::set_allocated_tabname(std::string* tabname) {
  if (tabname != nullptr) {
    
  } else {
    
  }
  tabname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tabname);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_SQL_REQ.tabname)
}

// -------------------------------------------------------------------

// PK_GET_TAB_SQL_RSP

// string errmsg = 1;
inline void PK_GET_TAB_SQL_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_SQL_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_GET_TAB_SQL_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
}
inline std::string* PK_GET_TAB_SQL_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_GET_TAB_SQL_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_GET_TAB_SQL_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_SQL_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
}
inline void PK_GET_TAB_SQL_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
}
inline void PK_GET_TAB_SQL_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
}
inline std::string* PK_GET_TAB_SQL_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_SQL_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_SQL_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_SQL_RSP.errmsg)
}

// string sql = 2;
inline void PK_GET_TAB_SQL_RSP::clear_sql() {
  sql_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_SQL_RSP::sql() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_SQL_RSP.sql)
  return _internal_sql();
}
inline void PK_GET_TAB_SQL_RSP::set_sql(const std::string& value) {
  _internal_set_sql(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_SQL_RSP.sql)
}
inline std::string* PK_GET_TAB_SQL_RSP::mutable_sql() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_SQL_RSP.sql)
  return _internal_mutable_sql();
}
inline const std::string& PK_GET_TAB_SQL_RSP::_internal_sql() const {
  return sql_.GetNoArena();
}
inline void PK_GET_TAB_SQL_RSP::_internal_set_sql(const std::string& value) {
  
  sql_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_SQL_RSP::set_sql(std::string&& value) {
  
  sql_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_SQL_RSP.sql)
}
inline void PK_GET_TAB_SQL_RSP::set_sql(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_SQL_RSP.sql)
}
inline void PK_GET_TAB_SQL_RSP::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_SQL_RSP.sql)
}
inline std::string* PK_GET_TAB_SQL_RSP::_internal_mutable_sql() {
  
  return sql_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_SQL_RSP::release_sql() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_SQL_RSP.sql)
  
  return sql_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_SQL_RSP::set_allocated_sql(std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_SQL_RSP.sql)
}

// -------------------------------------------------------------------

// PK_GET_TAB_MODEL_CODE_REQ

// string tabname = 1;
inline void PK_GET_TAB_MODEL_CODE_REQ::clear_tabname() {
  tabname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_MODEL_CODE_REQ::tabname() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
  return _internal_tabname();
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_tabname(const std::string& value) {
  _internal_set_tabname(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::mutable_tabname() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
  return _internal_mutable_tabname();
}
inline const std::string& PK_GET_TAB_MODEL_CODE_REQ::_internal_tabname() const {
  return tabname_.GetNoArena();
}
inline void PK_GET_TAB_MODEL_CODE_REQ::_internal_set_tabname(const std::string& value) {
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_tabname(std::string&& value) {
  
  tabname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_tabname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_tabname(const char* value, size_t size) {
  
  tabname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::_internal_mutable_tabname() {
  
  return tabname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::release_tabname() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
  
  return tabname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_allocated_tabname(std::string* tabname) {
  if (tabname != nullptr) {
    
  } else {
    
  }
  tabname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tabname);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname)
}

// string prefix = 2;
inline void PK_GET_TAB_MODEL_CODE_REQ::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_MODEL_CODE_REQ::prefix() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
  return _internal_prefix();
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& PK_GET_TAB_MODEL_CODE_REQ::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void PK_GET_TAB_MODEL_CODE_REQ::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_MODEL_CODE_REQ::release_prefix() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_MODEL_CODE_REQ::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix)
}

// -------------------------------------------------------------------

// PK_GET_TAB_MODEL_CODE_RSP

// string errmsg = 1;
inline void PK_GET_TAB_MODEL_CODE_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_MODEL_CODE_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_GET_TAB_MODEL_CODE_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_GET_TAB_MODEL_CODE_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg)
}

// string code = 2;
inline void PK_GET_TAB_MODEL_CODE_RSP::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_GET_TAB_MODEL_CODE_RSP::code() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
  return _internal_code();
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
  return _internal_mutable_code();
}
inline const std::string& PK_GET_TAB_MODEL_CODE_RSP::_internal_code() const {
  return code_.GetNoArena();
}
inline void PK_GET_TAB_MODEL_CODE_RSP::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_GET_TAB_MODEL_CODE_RSP::release_code() {
  // @@protoc_insertion_point(field_release:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_GET_TAB_MODEL_CODE_RSP::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_GET_TAB_MODEL_CODE_RSP.code)
}

// -------------------------------------------------------------------

// PK_SET_LOG_DIR_REQ

// string dir = 1;
inline void PK_SET_LOG_DIR_REQ::clear_dir() {
  dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_SET_LOG_DIR_REQ::dir() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_SET_LOG_DIR_REQ.dir)
  return _internal_dir();
}
inline void PK_SET_LOG_DIR_REQ::set_dir(const std::string& value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_SET_LOG_DIR_REQ.dir)
}
inline std::string* PK_SET_LOG_DIR_REQ::mutable_dir() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_SET_LOG_DIR_REQ.dir)
  return _internal_mutable_dir();
}
inline const std::string& PK_SET_LOG_DIR_REQ::_internal_dir() const {
  return dir_.GetNoArena();
}
inline void PK_SET_LOG_DIR_REQ::_internal_set_dir(const std::string& value) {
  
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_SET_LOG_DIR_REQ::set_dir(std::string&& value) {
  
  dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_SET_LOG_DIR_REQ.dir)
}
inline void PK_SET_LOG_DIR_REQ::set_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_SET_LOG_DIR_REQ.dir)
}
inline void PK_SET_LOG_DIR_REQ::set_dir(const char* value, size_t size) {
  
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_SET_LOG_DIR_REQ.dir)
}
inline std::string* PK_SET_LOG_DIR_REQ::_internal_mutable_dir() {
  
  return dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_SET_LOG_DIR_REQ::release_dir() {
  // @@protoc_insertion_point(field_release:pbapi.PK_SET_LOG_DIR_REQ.dir)
  
  return dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_SET_LOG_DIR_REQ::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_SET_LOG_DIR_REQ.dir)
}

// -------------------------------------------------------------------

// PK_SET_LOG_DIR_RSP

// string errmsg = 1;
inline void PK_SET_LOG_DIR_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_SET_LOG_DIR_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_SET_LOG_DIR_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
}
inline std::string* PK_SET_LOG_DIR_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_SET_LOG_DIR_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_SET_LOG_DIR_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_SET_LOG_DIR_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
}
inline void PK_SET_LOG_DIR_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
}
inline void PK_SET_LOG_DIR_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
}
inline std::string* PK_SET_LOG_DIR_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_SET_LOG_DIR_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_SET_LOG_DIR_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pbapi.PK_SET_LOG_DIR_RSP.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbapi::PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ>() {
  return ::pbapi::PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP>() {
  return ::pbapi::PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ>() {
  return ::pbapi::PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP>() {
  return ::pbapi::PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ>() {
  return ::pbapi::PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP>() {
  return ::pbapi::PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ>() {
  return ::pbapi::PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP>() {
  return ::pbapi::PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ>() {
  return ::pbapi::PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP>() {
  return ::pbapi::PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ>() {
  return ::pbapi::PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP>() {
  return ::pbapi::PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ>() {
  return ::pbapi::PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP>() {
  return ::pbapi::PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ>() {
  return ::pbapi::PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor();
}
template <> struct is_proto_enum< ::pbapi::PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbapi::PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP>() {
  return ::pbapi::PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
