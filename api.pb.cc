// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pbapi {
class PK_KEEPALIVE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_KEEPALIVE_REQ> _instance;
} _PK_KEEPALIVE_REQ_default_instance_;
class PK_KEEPALIVE_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_KEEPALIVE_RSP> _instance;
} _PK_KEEPALIVE_RSP_default_instance_;
class PK_USER_LOGIN_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_USER_LOGIN_REQ> _instance;
} _PK_USER_LOGIN_REQ_default_instance_;
class PK_USER_LOGIN_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_USER_LOGIN_RSP> _instance;
} _PK_USER_LOGIN_RSP_default_instance_;
class PK_GET_ALL_TABNAMES_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_ALL_TABNAMES_REQ> _instance;
} _PK_GET_ALL_TABNAMES_REQ_default_instance_;
class PK_GET_ALL_TABNAMES_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_ALL_TABNAMES_RSP> _instance;
} _PK_GET_ALL_TABNAMES_RSP_default_instance_;
class PK_OPEN_DB_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_OPEN_DB_REQ> _instance;
} _PK_OPEN_DB_REQ_default_instance_;
class PK_OPEN_DB_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_OPEN_DB_RSP> _instance;
} _PK_OPEN_DB_RSP_default_instance_;
class PK_GET_TABNAMES_PAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TABNAMES_PAGE_REQ> _instance;
} _PK_GET_TABNAMES_PAGE_REQ_default_instance_;
class PK_GET_TABNAMES_PAGE_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TABNAMES_PAGE_RSP> _instance;
} _PK_GET_TABNAMES_PAGE_RSP_default_instance_;
class PK_GET_TAB_SQL_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TAB_SQL_REQ> _instance;
} _PK_GET_TAB_SQL_REQ_default_instance_;
class PK_GET_TAB_SQL_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TAB_SQL_RSP> _instance;
} _PK_GET_TAB_SQL_RSP_default_instance_;
class PK_GET_TAB_MODEL_CODE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TAB_MODEL_CODE_REQ> _instance;
} _PK_GET_TAB_MODEL_CODE_REQ_default_instance_;
class PK_GET_TAB_MODEL_CODE_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_GET_TAB_MODEL_CODE_RSP> _instance;
} _PK_GET_TAB_MODEL_CODE_RSP_default_instance_;
class PK_SET_LOG_DIR_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_SET_LOG_DIR_REQ> _instance;
} _PK_SET_LOG_DIR_REQ_default_instance_;
class PK_SET_LOG_DIR_RSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PK_SET_LOG_DIR_RSP> _instance;
} _PK_SET_LOG_DIR_RSP_default_instance_;
}  // namespace pbapi
static void InitDefaultsscc_info_PK_GET_ALL_TABNAMES_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_ALL_TABNAMES_REQ_default_instance_;
    new (ptr) ::pbapi::PK_GET_ALL_TABNAMES_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_ALL_TABNAMES_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_ALL_TABNAMES_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_ALL_TABNAMES_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_ALL_TABNAMES_RSP_default_instance_;
    new (ptr) ::pbapi::PK_GET_ALL_TABNAMES_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_ALL_TABNAMES_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TABNAMES_PAGE_REQ_default_instance_;
    new (ptr) ::pbapi::PK_GET_TABNAMES_PAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TABNAMES_PAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TABNAMES_PAGE_RSP_default_instance_;
    new (ptr) ::pbapi::PK_GET_TABNAMES_PAGE_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TABNAMES_PAGE_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TAB_MODEL_CODE_REQ_default_instance_;
    new (ptr) ::pbapi::PK_GET_TAB_MODEL_CODE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TAB_MODEL_CODE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TAB_MODEL_CODE_RSP_default_instance_;
    new (ptr) ::pbapi::PK_GET_TAB_MODEL_CODE_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TAB_MODEL_CODE_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TAB_SQL_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TAB_SQL_REQ_default_instance_;
    new (ptr) ::pbapi::PK_GET_TAB_SQL_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TAB_SQL_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TAB_SQL_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TAB_SQL_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_GET_TAB_SQL_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_GET_TAB_SQL_RSP_default_instance_;
    new (ptr) ::pbapi::PK_GET_TAB_SQL_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_GET_TAB_SQL_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_GET_TAB_SQL_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_GET_TAB_SQL_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_KEEPALIVE_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_KEEPALIVE_REQ_default_instance_;
    new (ptr) ::pbapi::PK_KEEPALIVE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_KEEPALIVE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_KEEPALIVE_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_KEEPALIVE_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_KEEPALIVE_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_KEEPALIVE_RSP_default_instance_;
    new (ptr) ::pbapi::PK_KEEPALIVE_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_KEEPALIVE_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_KEEPALIVE_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_KEEPALIVE_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_OPEN_DB_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_OPEN_DB_REQ_default_instance_;
    new (ptr) ::pbapi::PK_OPEN_DB_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_OPEN_DB_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_OPEN_DB_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_OPEN_DB_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_OPEN_DB_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_OPEN_DB_RSP_default_instance_;
    new (ptr) ::pbapi::PK_OPEN_DB_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_OPEN_DB_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_OPEN_DB_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_OPEN_DB_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_SET_LOG_DIR_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_SET_LOG_DIR_REQ_default_instance_;
    new (ptr) ::pbapi::PK_SET_LOG_DIR_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_SET_LOG_DIR_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_SET_LOG_DIR_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_SET_LOG_DIR_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_SET_LOG_DIR_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_SET_LOG_DIR_RSP_default_instance_;
    new (ptr) ::pbapi::PK_SET_LOG_DIR_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_SET_LOG_DIR_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_SET_LOG_DIR_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_SET_LOG_DIR_RSP_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_USER_LOGIN_REQ_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_USER_LOGIN_REQ_default_instance_;
    new (ptr) ::pbapi::PK_USER_LOGIN_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_USER_LOGIN_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_USER_LOGIN_REQ_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_USER_LOGIN_REQ_api_2eproto}, {}};

static void InitDefaultsscc_info_PK_USER_LOGIN_RSP_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbapi::_PK_USER_LOGIN_RSP_default_instance_;
    new (ptr) ::pbapi::PK_USER_LOGIN_RSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbapi::PK_USER_LOGIN_RSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PK_USER_LOGIN_RSP_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PK_USER_LOGIN_RSP_api_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_KEEPALIVE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_KEEPALIVE_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_USER_LOGIN_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_USER_LOGIN_REQ, name_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_USER_LOGIN_REQ, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_USER_LOGIN_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_USER_LOGIN_RSP, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_ALL_TABNAMES_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_ALL_TABNAMES_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_ALL_TABNAMES_RSP, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_ALL_TABNAMES_RSP, names_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_ALL_TABNAMES_RSP, deses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, host_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, port_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, username_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, passwd_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_REQ, dbname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_OPEN_DB_RSP, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_REQ, page_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_REQ, limit_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_REQ, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_RSP, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_RSP, total_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_RSP, names_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TABNAMES_PAGE_RSP, deses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_SQL_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_SQL_REQ, tabname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_SQL_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_SQL_RSP, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_SQL_RSP, sql_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_REQ, tabname_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_REQ, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_RSP, errmsg_),
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_GET_TAB_MODEL_CODE_RSP, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_SET_LOG_DIR_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_SET_LOG_DIR_REQ, dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_SET_LOG_DIR_RSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbapi::PK_SET_LOG_DIR_RSP, errmsg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pbapi::PK_KEEPALIVE_REQ)},
  { 5, -1, sizeof(::pbapi::PK_KEEPALIVE_RSP)},
  { 10, -1, sizeof(::pbapi::PK_USER_LOGIN_REQ)},
  { 17, -1, sizeof(::pbapi::PK_USER_LOGIN_RSP)},
  { 23, -1, sizeof(::pbapi::PK_GET_ALL_TABNAMES_REQ)},
  { 28, -1, sizeof(::pbapi::PK_GET_ALL_TABNAMES_RSP)},
  { 36, -1, sizeof(::pbapi::PK_OPEN_DB_REQ)},
  { 46, -1, sizeof(::pbapi::PK_OPEN_DB_RSP)},
  { 52, -1, sizeof(::pbapi::PK_GET_TABNAMES_PAGE_REQ)},
  { 60, -1, sizeof(::pbapi::PK_GET_TABNAMES_PAGE_RSP)},
  { 69, -1, sizeof(::pbapi::PK_GET_TAB_SQL_REQ)},
  { 75, -1, sizeof(::pbapi::PK_GET_TAB_SQL_RSP)},
  { 82, -1, sizeof(::pbapi::PK_GET_TAB_MODEL_CODE_REQ)},
  { 89, -1, sizeof(::pbapi::PK_GET_TAB_MODEL_CODE_RSP)},
  { 96, -1, sizeof(::pbapi::PK_SET_LOG_DIR_REQ)},
  { 102, -1, sizeof(::pbapi::PK_SET_LOG_DIR_RSP)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_KEEPALIVE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_KEEPALIVE_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_USER_LOGIN_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_USER_LOGIN_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_ALL_TABNAMES_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_ALL_TABNAMES_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_OPEN_DB_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_OPEN_DB_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TABNAMES_PAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TABNAMES_PAGE_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TAB_SQL_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TAB_SQL_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TAB_MODEL_CODE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_GET_TAB_MODEL_CODE_RSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_SET_LOG_DIR_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbapi::_PK_SET_LOG_DIR_RSP_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\005pbapi\"@\n\020PK_KEEPALIVE_REQ\","
  "\n\021CMD_KEEPALIVE_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020"
  "\201\200\254P\"@\n\020PK_KEEPALIVE_RSP\",\n\021CMD_KEEPALIV"
  "E_RSP\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\201\200\250X\"]\n\021PK_USE"
  "R_LOGIN_REQ\022\014\n\004name\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\"-"
  "\n\022CMD_USER_LOGIN_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD"
  "\020\202\200\254P\"R\n\021PK_USER_LOGIN_RSP\022\016\n\006errMsg\030\001 \001"
  "(\t\"-\n\022CMD_USER_LOGIN_RSP\022\013\n\007UNKNOWN\020\000\022\n\n"
  "\003CMD\020\202\200\250X\"N\n\027PK_GET_ALL_TABNAMES_REQ\"3\n\030"
  "CMD_GET_ALL_TABNAMES_REQ\022\013\n\007UNKNOWN\020\000\022\n\n"
  "\003CMD\020\203\200\254P\"|\n\027PK_GET_ALL_TABNAMES_RSP\022\016\n\006"
  "errmsg\030\001 \001(\t\022\r\n\005names\030\002 \003(\t\022\r\n\005deses\030\003 \003"
  "(\t\"3\n\030CMD_GET_ALL_TABNAMES_RSP\022\013\n\007UNKNOW"
  "N\020\000\022\n\n\003CMD\020\203\200\250X\"\212\001\n\016PK_OPEN_DB_REQ\022\014\n\004ho"
  "st\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\020\n\010username\030\004 \001(\t"
  "\022\016\n\006passwd\030\005 \001(\t\022\016\n\006dbname\030\006 \001(\t\"*\n\017CMD_"
  "OPEN_DB_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\205\200\254P\"L\n\016"
  "PK_OPEN_DB_RSP\022\016\n\006errmsg\030\001 \001(\t\"*\n\017CMD_OP"
  "EN_DB_RSP\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\205\200\250X\"}\n\030PK"
  "_GET_TABNAMES_PAGE_REQ\022\014\n\004page\030\001 \001(\r\022\r\n\005"
  "limit\030\002 \001(\r\022\016\n\006filter\030\003 \001(\t\"4\n\031CMD_GET_T"
  "ABNAMES_PAGE_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\206\200\254"
  "P\"\215\001\n\030PK_GET_TABNAMES_PAGE_RSP\022\016\n\006errmsg"
  "\030\001 \001(\t\022\r\n\005total\030\002 \001(\r\022\r\n\005names\030\003 \003(\t\022\r\n\005"
  "deses\030\004 \003(\t\"4\n\031CMD_GET_TABNAMES_PAGE_RSP"
  "\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\206\200\250X\"U\n\022PK_GET_TAB_"
  "SQL_REQ\022\017\n\007tabname\030\001 \001(\t\".\n\023CMD_GET_TAB_"
  "SQL_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\207\200\254P\"a\n\022PK_G"
  "ET_TAB_SQL_RSP\022\016\n\006errmsg\030\001 \001(\t\022\013\n\003sql\030\002 "
  "\001(\t\".\n\023CMD_GET_TAB_SQL_RSP\022\013\n\007UNKNOWN\020\000\022"
  "\n\n\003CMD\020\207\200\250X\"s\n\031PK_GET_TAB_MODEL_CODE_REQ"
  "\022\017\n\007tabname\030\001 \001(\t\022\016\n\006prefix\030\002 \001(\t\"5\n\032CMD"
  "_GET_TAB_MODEL_CODE_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003"
  "CMD\020\210\200\254P\"p\n\031PK_GET_TAB_MODEL_CODE_RSP\022\016\n"
  "\006errmsg\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"5\n\032CMD_GET_T"
  "AB_MODEL_CODE_RSP\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD\020\210\200"
  "\250X\"Q\n\022PK_SET_LOG_DIR_REQ\022\013\n\003dir\030\001 \001(\t\".\n"
  "\023CMD_SET_LOG_DIR_REQ\022\013\n\007UNKNOWN\020\000\022\n\n\003CMD"
  "\020\212\200\254P\"T\n\022PK_SET_LOG_DIR_RSP\022\016\n\006errmsg\030\001 "
  "\001(\t\".\n\023CMD_SET_LOG_DIR_RSP\022\013\n\007UNKNOWN\020\000\022"
  "\n\n\003CMD\020\212\200\250Xb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2eproto_sccs[16] = {
  &scc_info_PK_GET_ALL_TABNAMES_REQ_api_2eproto.base,
  &scc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto.base,
  &scc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto.base,
  &scc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto.base,
  &scc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto.base,
  &scc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto.base,
  &scc_info_PK_GET_TAB_SQL_REQ_api_2eproto.base,
  &scc_info_PK_GET_TAB_SQL_RSP_api_2eproto.base,
  &scc_info_PK_KEEPALIVE_REQ_api_2eproto.base,
  &scc_info_PK_KEEPALIVE_RSP_api_2eproto.base,
  &scc_info_PK_OPEN_DB_REQ_api_2eproto.base,
  &scc_info_PK_OPEN_DB_RSP_api_2eproto.base,
  &scc_info_PK_SET_LOG_DIR_REQ_api_2eproto.base,
  &scc_info_PK_SET_LOG_DIR_RSP_api_2eproto.base,
  &scc_info_PK_USER_LOGIN_REQ_api_2eproto.base,
  &scc_info_PK_USER_LOGIN_RSP_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
static bool descriptor_table_api_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  &descriptor_table_api_2eproto_initialized, descriptor_table_protodef_api_2eproto, "api.proto", 1619,
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_sccs, descriptor_table_api_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  file_level_metadata_api_2eproto, 16, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto), true);
namespace pbapi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[0];
}
bool PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493057:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ::UNKNOWN;
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ::CMD;
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ::CMD_KEEPALIVE_REQ_MIN;
constexpr PK_KEEPALIVE_REQ_CMD_KEEPALIVE_REQ PK_KEEPALIVE_REQ::CMD_KEEPALIVE_REQ_MAX;
constexpr int PK_KEEPALIVE_REQ::CMD_KEEPALIVE_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[1];
}
bool PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204737:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP::UNKNOWN;
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP::CMD;
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP::CMD_KEEPALIVE_RSP_MIN;
constexpr PK_KEEPALIVE_RSP_CMD_KEEPALIVE_RSP PK_KEEPALIVE_RSP::CMD_KEEPALIVE_RSP_MAX;
constexpr int PK_KEEPALIVE_RSP::CMD_KEEPALIVE_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[2];
}
bool PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493058:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ::UNKNOWN;
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ::CMD;
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ::CMD_USER_LOGIN_REQ_MIN;
constexpr PK_USER_LOGIN_REQ_CMD_USER_LOGIN_REQ PK_USER_LOGIN_REQ::CMD_USER_LOGIN_REQ_MAX;
constexpr int PK_USER_LOGIN_REQ::CMD_USER_LOGIN_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[3];
}
bool PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204738:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP::UNKNOWN;
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP::CMD;
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP::CMD_USER_LOGIN_RSP_MIN;
constexpr PK_USER_LOGIN_RSP_CMD_USER_LOGIN_RSP PK_USER_LOGIN_RSP::CMD_USER_LOGIN_RSP_MAX;
constexpr int PK_USER_LOGIN_RSP::CMD_USER_LOGIN_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[4];
}
bool PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493059:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ::UNKNOWN;
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ::CMD;
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ::CMD_GET_ALL_TABNAMES_REQ_MIN;
constexpr PK_GET_ALL_TABNAMES_REQ_CMD_GET_ALL_TABNAMES_REQ PK_GET_ALL_TABNAMES_REQ::CMD_GET_ALL_TABNAMES_REQ_MAX;
constexpr int PK_GET_ALL_TABNAMES_REQ::CMD_GET_ALL_TABNAMES_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[5];
}
bool PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204739:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP::UNKNOWN;
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP::CMD;
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP::CMD_GET_ALL_TABNAMES_RSP_MIN;
constexpr PK_GET_ALL_TABNAMES_RSP_CMD_GET_ALL_TABNAMES_RSP PK_GET_ALL_TABNAMES_RSP::CMD_GET_ALL_TABNAMES_RSP_MAX;
constexpr int PK_GET_ALL_TABNAMES_RSP::CMD_GET_ALL_TABNAMES_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[6];
}
bool PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493061:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ::UNKNOWN;
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ::CMD;
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ::CMD_OPEN_DB_REQ_MIN;
constexpr PK_OPEN_DB_REQ_CMD_OPEN_DB_REQ PK_OPEN_DB_REQ::CMD_OPEN_DB_REQ_MAX;
constexpr int PK_OPEN_DB_REQ::CMD_OPEN_DB_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[7];
}
bool PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204741:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP::UNKNOWN;
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP::CMD;
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP::CMD_OPEN_DB_RSP_MIN;
constexpr PK_OPEN_DB_RSP_CMD_OPEN_DB_RSP PK_OPEN_DB_RSP::CMD_OPEN_DB_RSP_MAX;
constexpr int PK_OPEN_DB_RSP::CMD_OPEN_DB_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[8];
}
bool PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493062:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ::UNKNOWN;
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ::CMD;
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ::CMD_GET_TABNAMES_PAGE_REQ_MIN;
constexpr PK_GET_TABNAMES_PAGE_REQ_CMD_GET_TABNAMES_PAGE_REQ PK_GET_TABNAMES_PAGE_REQ::CMD_GET_TABNAMES_PAGE_REQ_MAX;
constexpr int PK_GET_TABNAMES_PAGE_REQ::CMD_GET_TABNAMES_PAGE_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[9];
}
bool PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204742:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP::UNKNOWN;
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP::CMD;
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP::CMD_GET_TABNAMES_PAGE_RSP_MIN;
constexpr PK_GET_TABNAMES_PAGE_RSP_CMD_GET_TABNAMES_PAGE_RSP PK_GET_TABNAMES_PAGE_RSP::CMD_GET_TABNAMES_PAGE_RSP_MAX;
constexpr int PK_GET_TABNAMES_PAGE_RSP::CMD_GET_TABNAMES_PAGE_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[10];
}
bool PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493063:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ::UNKNOWN;
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ::CMD;
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ::CMD_GET_TAB_SQL_REQ_MIN;
constexpr PK_GET_TAB_SQL_REQ_CMD_GET_TAB_SQL_REQ PK_GET_TAB_SQL_REQ::CMD_GET_TAB_SQL_REQ_MAX;
constexpr int PK_GET_TAB_SQL_REQ::CMD_GET_TAB_SQL_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[11];
}
bool PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204743:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP::UNKNOWN;
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP::CMD;
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP::CMD_GET_TAB_SQL_RSP_MIN;
constexpr PK_GET_TAB_SQL_RSP_CMD_GET_TAB_SQL_RSP PK_GET_TAB_SQL_RSP::CMD_GET_TAB_SQL_RSP_MAX;
constexpr int PK_GET_TAB_SQL_RSP::CMD_GET_TAB_SQL_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[12];
}
bool PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493064:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ::UNKNOWN;
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ::CMD;
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ::CMD_GET_TAB_MODEL_CODE_REQ_MIN;
constexpr PK_GET_TAB_MODEL_CODE_REQ_CMD_GET_TAB_MODEL_CODE_REQ PK_GET_TAB_MODEL_CODE_REQ::CMD_GET_TAB_MODEL_CODE_REQ_MAX;
constexpr int PK_GET_TAB_MODEL_CODE_REQ::CMD_GET_TAB_MODEL_CODE_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[13];
}
bool PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204744:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP::UNKNOWN;
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP::CMD;
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP::CMD_GET_TAB_MODEL_CODE_RSP_MIN;
constexpr PK_GET_TAB_MODEL_CODE_RSP_CMD_GET_TAB_MODEL_CODE_RSP PK_GET_TAB_MODEL_CODE_RSP::CMD_GET_TAB_MODEL_CODE_RSP_MAX;
constexpr int PK_GET_TAB_MODEL_CODE_RSP::CMD_GET_TAB_MODEL_CODE_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[14];
}
bool PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ_IsValid(int value) {
  switch (value) {
    case 0:
    case 168493066:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ::UNKNOWN;
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ::CMD;
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ::CMD_SET_LOG_DIR_REQ_MIN;
constexpr PK_SET_LOG_DIR_REQ_CMD_SET_LOG_DIR_REQ PK_SET_LOG_DIR_REQ::CMD_SET_LOG_DIR_REQ_MAX;
constexpr int PK_SET_LOG_DIR_REQ::CMD_SET_LOG_DIR_REQ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[15];
}
bool PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP_IsValid(int value) {
  switch (value) {
    case 0:
    case 185204746:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP::UNKNOWN;
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP::CMD;
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP::CMD_SET_LOG_DIR_RSP_MIN;
constexpr PK_SET_LOG_DIR_RSP_CMD_SET_LOG_DIR_RSP PK_SET_LOG_DIR_RSP::CMD_SET_LOG_DIR_RSP_MAX;
constexpr int PK_SET_LOG_DIR_RSP::CMD_SET_LOG_DIR_RSP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PK_KEEPALIVE_REQ::InitAsDefaultInstance() {
}
class PK_KEEPALIVE_REQ::_Internal {
 public:
};

PK_KEEPALIVE_REQ::PK_KEEPALIVE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_KEEPALIVE_REQ)
}
PK_KEEPALIVE_REQ::PK_KEEPALIVE_REQ(const PK_KEEPALIVE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_KEEPALIVE_REQ)
}

void PK_KEEPALIVE_REQ::SharedCtor() {
}

PK_KEEPALIVE_REQ::~PK_KEEPALIVE_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_KEEPALIVE_REQ)
  SharedDtor();
}

void PK_KEEPALIVE_REQ::SharedDtor() {
}

void PK_KEEPALIVE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_KEEPALIVE_REQ& PK_KEEPALIVE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_KEEPALIVE_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_KEEPALIVE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_KEEPALIVE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PK_KEEPALIVE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_KEEPALIVE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_KEEPALIVE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_KEEPALIVE_REQ)
  return target;
}

size_t PK_KEEPALIVE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_KEEPALIVE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_KEEPALIVE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_KEEPALIVE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_KEEPALIVE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_KEEPALIVE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_KEEPALIVE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_KEEPALIVE_REQ)
    MergeFrom(*source);
  }
}

void PK_KEEPALIVE_REQ::MergeFrom(const PK_KEEPALIVE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_KEEPALIVE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PK_KEEPALIVE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_KEEPALIVE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_KEEPALIVE_REQ::CopyFrom(const PK_KEEPALIVE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_KEEPALIVE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_KEEPALIVE_REQ::IsInitialized() const {
  return true;
}

void PK_KEEPALIVE_REQ::InternalSwap(PK_KEEPALIVE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_KEEPALIVE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_KEEPALIVE_RSP::InitAsDefaultInstance() {
}
class PK_KEEPALIVE_RSP::_Internal {
 public:
};

PK_KEEPALIVE_RSP::PK_KEEPALIVE_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_KEEPALIVE_RSP)
}
PK_KEEPALIVE_RSP::PK_KEEPALIVE_RSP(const PK_KEEPALIVE_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_KEEPALIVE_RSP)
}

void PK_KEEPALIVE_RSP::SharedCtor() {
}

PK_KEEPALIVE_RSP::~PK_KEEPALIVE_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_KEEPALIVE_RSP)
  SharedDtor();
}

void PK_KEEPALIVE_RSP::SharedDtor() {
}

void PK_KEEPALIVE_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_KEEPALIVE_RSP& PK_KEEPALIVE_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_KEEPALIVE_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_KEEPALIVE_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_KEEPALIVE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PK_KEEPALIVE_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_KEEPALIVE_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_KEEPALIVE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_KEEPALIVE_RSP)
  return target;
}

size_t PK_KEEPALIVE_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_KEEPALIVE_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_KEEPALIVE_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_KEEPALIVE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_KEEPALIVE_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_KEEPALIVE_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_KEEPALIVE_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_KEEPALIVE_RSP)
    MergeFrom(*source);
  }
}

void PK_KEEPALIVE_RSP::MergeFrom(const PK_KEEPALIVE_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_KEEPALIVE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PK_KEEPALIVE_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_KEEPALIVE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_KEEPALIVE_RSP::CopyFrom(const PK_KEEPALIVE_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_KEEPALIVE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_KEEPALIVE_RSP::IsInitialized() const {
  return true;
}

void PK_KEEPALIVE_RSP::InternalSwap(PK_KEEPALIVE_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_KEEPALIVE_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_USER_LOGIN_REQ::InitAsDefaultInstance() {
}
class PK_USER_LOGIN_REQ::_Internal {
 public:
};

PK_USER_LOGIN_REQ::PK_USER_LOGIN_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_USER_LOGIN_REQ)
}
PK_USER_LOGIN_REQ::PK_USER_LOGIN_REQ(const PK_USER_LOGIN_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_USER_LOGIN_REQ)
}

void PK_USER_LOGIN_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_USER_LOGIN_REQ_api_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_USER_LOGIN_REQ::~PK_USER_LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_USER_LOGIN_REQ)
  SharedDtor();
}

void PK_USER_LOGIN_REQ::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_USER_LOGIN_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_USER_LOGIN_REQ& PK_USER_LOGIN_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_USER_LOGIN_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_USER_LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_USER_LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_USER_LOGIN_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_USER_LOGIN_REQ.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_USER_LOGIN_REQ.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_USER_LOGIN_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_USER_LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_USER_LOGIN_REQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_USER_LOGIN_REQ.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_USER_LOGIN_REQ)
  return target;
}

size_t PK_USER_LOGIN_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_USER_LOGIN_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_USER_LOGIN_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_USER_LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_USER_LOGIN_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_USER_LOGIN_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_USER_LOGIN_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_USER_LOGIN_REQ)
    MergeFrom(*source);
  }
}

void PK_USER_LOGIN_REQ::MergeFrom(const PK_USER_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_USER_LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
}

void PK_USER_LOGIN_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_USER_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_USER_LOGIN_REQ::CopyFrom(const PK_USER_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_USER_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_USER_LOGIN_REQ::IsInitialized() const {
  return true;
}

void PK_USER_LOGIN_REQ::InternalSwap(PK_USER_LOGIN_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_USER_LOGIN_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_USER_LOGIN_RSP::InitAsDefaultInstance() {
}
class PK_USER_LOGIN_RSP::_Internal {
 public:
};

PK_USER_LOGIN_RSP::PK_USER_LOGIN_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_USER_LOGIN_RSP)
}
PK_USER_LOGIN_RSP::PK_USER_LOGIN_RSP(const PK_USER_LOGIN_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_USER_LOGIN_RSP)
}

void PK_USER_LOGIN_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_USER_LOGIN_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_USER_LOGIN_RSP::~PK_USER_LOGIN_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_USER_LOGIN_RSP)
  SharedDtor();
}

void PK_USER_LOGIN_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_USER_LOGIN_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_USER_LOGIN_RSP& PK_USER_LOGIN_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_USER_LOGIN_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_USER_LOGIN_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_USER_LOGIN_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_USER_LOGIN_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_USER_LOGIN_RSP.errMsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_USER_LOGIN_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_USER_LOGIN_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errMsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_USER_LOGIN_RSP.errMsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_USER_LOGIN_RSP)
  return target;
}

size_t PK_USER_LOGIN_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_USER_LOGIN_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errMsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_USER_LOGIN_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_USER_LOGIN_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_USER_LOGIN_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_USER_LOGIN_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_USER_LOGIN_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_USER_LOGIN_RSP)
    MergeFrom(*source);
  }
}

void PK_USER_LOGIN_RSP::MergeFrom(const PK_USER_LOGIN_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_USER_LOGIN_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void PK_USER_LOGIN_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_USER_LOGIN_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_USER_LOGIN_RSP::CopyFrom(const PK_USER_LOGIN_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_USER_LOGIN_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_USER_LOGIN_RSP::IsInitialized() const {
  return true;
}

void PK_USER_LOGIN_RSP::InternalSwap(PK_USER_LOGIN_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_USER_LOGIN_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_ALL_TABNAMES_REQ::InitAsDefaultInstance() {
}
class PK_GET_ALL_TABNAMES_REQ::_Internal {
 public:
};

PK_GET_ALL_TABNAMES_REQ::PK_GET_ALL_TABNAMES_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_ALL_TABNAMES_REQ)
}
PK_GET_ALL_TABNAMES_REQ::PK_GET_ALL_TABNAMES_REQ(const PK_GET_ALL_TABNAMES_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_ALL_TABNAMES_REQ)
}

void PK_GET_ALL_TABNAMES_REQ::SharedCtor() {
}

PK_GET_ALL_TABNAMES_REQ::~PK_GET_ALL_TABNAMES_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_ALL_TABNAMES_REQ)
  SharedDtor();
}

void PK_GET_ALL_TABNAMES_REQ::SharedDtor() {
}

void PK_GET_ALL_TABNAMES_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_ALL_TABNAMES_REQ& PK_GET_ALL_TABNAMES_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_ALL_TABNAMES_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_ALL_TABNAMES_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PK_GET_ALL_TABNAMES_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_ALL_TABNAMES_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_ALL_TABNAMES_REQ)
  return target;
}

size_t PK_GET_ALL_TABNAMES_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_ALL_TABNAMES_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_ALL_TABNAMES_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_ALL_TABNAMES_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_ALL_TABNAMES_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_ALL_TABNAMES_REQ)
    MergeFrom(*source);
  }
}

void PK_GET_ALL_TABNAMES_REQ::MergeFrom(const PK_GET_ALL_TABNAMES_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PK_GET_ALL_TABNAMES_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_ALL_TABNAMES_REQ::CopyFrom(const PK_GET_ALL_TABNAMES_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_ALL_TABNAMES_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_ALL_TABNAMES_REQ::IsInitialized() const {
  return true;
}

void PK_GET_ALL_TABNAMES_REQ::InternalSwap(PK_GET_ALL_TABNAMES_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_ALL_TABNAMES_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_ALL_TABNAMES_RSP::InitAsDefaultInstance() {
}
class PK_GET_ALL_TABNAMES_RSP::_Internal {
 public:
};

PK_GET_ALL_TABNAMES_RSP::PK_GET_ALL_TABNAMES_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_ALL_TABNAMES_RSP)
}
PK_GET_ALL_TABNAMES_RSP::PK_GET_ALL_TABNAMES_RSP(const PK_GET_ALL_TABNAMES_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_),
      deses_(from.deses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_ALL_TABNAMES_RSP)
}

void PK_GET_ALL_TABNAMES_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_GET_ALL_TABNAMES_RSP::~PK_GET_ALL_TABNAMES_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_ALL_TABNAMES_RSP)
  SharedDtor();
}

void PK_GET_ALL_TABNAMES_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_ALL_TABNAMES_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_ALL_TABNAMES_RSP& PK_GET_ALL_TABNAMES_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_ALL_TABNAMES_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_ALL_TABNAMES_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  deses_.Clear();
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_GET_ALL_TABNAMES_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_ALL_TABNAMES_RSP.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_ALL_TABNAMES_RSP.deses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_ALL_TABNAMES_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_ALL_TABNAMES_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_ALL_TABNAMES_RSP.names");
    target = stream->WriteString(2, s, target);
  }

  // repeated string deses = 3;
  for (int i = 0, n = this->_internal_deses_size(); i < n; i++) {
    const auto& s = this->_internal_deses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_ALL_TABNAMES_RSP.deses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_ALL_TABNAMES_RSP)
  return target;
}

size_t PK_GET_ALL_TABNAMES_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated string deses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deses_.size());
  for (int i = 0, n = deses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deses_.Get(i));
  }

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_ALL_TABNAMES_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_ALL_TABNAMES_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_ALL_TABNAMES_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_ALL_TABNAMES_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_ALL_TABNAMES_RSP)
    MergeFrom(*source);
  }
}

void PK_GET_ALL_TABNAMES_RSP::MergeFrom(const PK_GET_ALL_TABNAMES_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  deses_.MergeFrom(from.deses_);
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void PK_GET_ALL_TABNAMES_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_ALL_TABNAMES_RSP::CopyFrom(const PK_GET_ALL_TABNAMES_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_ALL_TABNAMES_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_ALL_TABNAMES_RSP::IsInitialized() const {
  return true;
}

void PK_GET_ALL_TABNAMES_RSP::InternalSwap(PK_GET_ALL_TABNAMES_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  deses_.InternalSwap(&other->deses_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_ALL_TABNAMES_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_OPEN_DB_REQ::InitAsDefaultInstance() {
}
class PK_OPEN_DB_REQ::_Internal {
 public:
};

PK_OPEN_DB_REQ::PK_OPEN_DB_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_OPEN_DB_REQ)
}
PK_OPEN_DB_REQ::PK_OPEN_DB_REQ(const PK_OPEN_DB_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwd().empty()) {
    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dbname().empty()) {
    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_OPEN_DB_REQ)
}

void PK_OPEN_DB_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_OPEN_DB_REQ_api_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

PK_OPEN_DB_REQ::~PK_OPEN_DB_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_OPEN_DB_REQ)
  SharedDtor();
}

void PK_OPEN_DB_REQ::SharedDtor() {
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_OPEN_DB_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_OPEN_DB_REQ& PK_OPEN_DB_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_OPEN_DB_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_OPEN_DB_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_OPEN_DB_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* PK_OPEN_DB_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_OPEN_DB_REQ.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_OPEN_DB_REQ.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passwd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_OPEN_DB_REQ.passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_OPEN_DB_REQ.dbname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_OPEN_DB_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_OPEN_DB_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_OPEN_DB_REQ.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_OPEN_DB_REQ.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // string passwd = 5;
  if (this->passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_OPEN_DB_REQ.passwd");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_passwd(), target);
  }

  // string dbname = 6;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_OPEN_DB_REQ.dbname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dbname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_OPEN_DB_REQ)
  return target;
}

size_t PK_OPEN_DB_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_OPEN_DB_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passwd = 5;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // string dbname = 6;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_OPEN_DB_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_OPEN_DB_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_OPEN_DB_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_OPEN_DB_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_OPEN_DB_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_OPEN_DB_REQ)
    MergeFrom(*source);
  }
}

void PK_OPEN_DB_REQ::MergeFrom(const PK_OPEN_DB_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_OPEN_DB_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void PK_OPEN_DB_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_OPEN_DB_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_OPEN_DB_REQ::CopyFrom(const PK_OPEN_DB_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_OPEN_DB_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_OPEN_DB_REQ::IsInitialized() const {
  return true;
}

void PK_OPEN_DB_REQ::InternalSwap(PK_OPEN_DB_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_OPEN_DB_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_OPEN_DB_RSP::InitAsDefaultInstance() {
}
class PK_OPEN_DB_RSP::_Internal {
 public:
};

PK_OPEN_DB_RSP::PK_OPEN_DB_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_OPEN_DB_RSP)
}
PK_OPEN_DB_RSP::PK_OPEN_DB_RSP(const PK_OPEN_DB_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_OPEN_DB_RSP)
}

void PK_OPEN_DB_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_OPEN_DB_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_OPEN_DB_RSP::~PK_OPEN_DB_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_OPEN_DB_RSP)
  SharedDtor();
}

void PK_OPEN_DB_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_OPEN_DB_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_OPEN_DB_RSP& PK_OPEN_DB_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_OPEN_DB_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_OPEN_DB_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_OPEN_DB_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_OPEN_DB_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_OPEN_DB_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_OPEN_DB_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_OPEN_DB_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_OPEN_DB_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_OPEN_DB_RSP)
  return target;
}

size_t PK_OPEN_DB_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_OPEN_DB_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_OPEN_DB_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_OPEN_DB_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_OPEN_DB_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_OPEN_DB_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_OPEN_DB_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_OPEN_DB_RSP)
    MergeFrom(*source);
  }
}

void PK_OPEN_DB_RSP::MergeFrom(const PK_OPEN_DB_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_OPEN_DB_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void PK_OPEN_DB_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_OPEN_DB_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_OPEN_DB_RSP::CopyFrom(const PK_OPEN_DB_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_OPEN_DB_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_OPEN_DB_RSP::IsInitialized() const {
  return true;
}

void PK_OPEN_DB_RSP::InternalSwap(PK_OPEN_DB_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_OPEN_DB_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TABNAMES_PAGE_REQ::InitAsDefaultInstance() {
}
class PK_GET_TABNAMES_PAGE_REQ::_Internal {
 public:
};

PK_GET_TABNAMES_PAGE_REQ::PK_GET_TABNAMES_PAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TABNAMES_PAGE_REQ)
}
PK_GET_TABNAMES_PAGE_REQ::PK_GET_TABNAMES_PAGE_REQ(const PK_GET_TABNAMES_PAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&page_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TABNAMES_PAGE_REQ)
}

void PK_GET_TABNAMES_PAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto.base);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&page_)) + sizeof(limit_));
}

PK_GET_TABNAMES_PAGE_REQ::~PK_GET_TABNAMES_PAGE_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  SharedDtor();
}

void PK_GET_TABNAMES_PAGE_REQ::SharedDtor() {
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TABNAMES_PAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TABNAMES_PAGE_REQ& PK_GET_TABNAMES_PAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TABNAMES_PAGE_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TABNAMES_PAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&page_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* PK_GET_TABNAMES_PAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TABNAMES_PAGE_REQ.filter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TABNAMES_PAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TABNAMES_PAGE_REQ.filter");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  return target;
}

size_t PK_GET_TABNAMES_PAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TABNAMES_PAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TABNAMES_PAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TABNAMES_PAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TABNAMES_PAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TABNAMES_PAGE_REQ)
    MergeFrom(*source);
  }
}

void PK_GET_TABNAMES_PAGE_REQ::MergeFrom(const PK_GET_TABNAMES_PAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void PK_GET_TABNAMES_PAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TABNAMES_PAGE_REQ::CopyFrom(const PK_GET_TABNAMES_PAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TABNAMES_PAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TABNAMES_PAGE_REQ::IsInitialized() const {
  return true;
}

void PK_GET_TABNAMES_PAGE_REQ::InternalSwap(PK_GET_TABNAMES_PAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_, other->page_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TABNAMES_PAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TABNAMES_PAGE_RSP::InitAsDefaultInstance() {
}
class PK_GET_TABNAMES_PAGE_RSP::_Internal {
 public:
};

PK_GET_TABNAMES_PAGE_RSP::PK_GET_TABNAMES_PAGE_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TABNAMES_PAGE_RSP)
}
PK_GET_TABNAMES_PAGE_RSP::PK_GET_TABNAMES_PAGE_RSP(const PK_GET_TABNAMES_PAGE_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_),
      deses_(from.deses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TABNAMES_PAGE_RSP)
}

void PK_GET_TABNAMES_PAGE_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = 0u;
}

PK_GET_TABNAMES_PAGE_RSP::~PK_GET_TABNAMES_PAGE_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  SharedDtor();
}

void PK_GET_TABNAMES_PAGE_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TABNAMES_PAGE_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TABNAMES_PAGE_RSP& PK_GET_TABNAMES_PAGE_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TABNAMES_PAGE_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TABNAMES_PAGE_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  deses_.Clear();
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = 0u;
  _internal_metadata_.Clear();
}

const char* PK_GET_TABNAMES_PAGE_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TABNAMES_PAGE_RSP.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TABNAMES_PAGE_RSP.deses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TABNAMES_PAGE_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TABNAMES_PAGE_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  // uint32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total(), target);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TABNAMES_PAGE_RSP.names");
    target = stream->WriteString(3, s, target);
  }

  // repeated string deses = 4;
  for (int i = 0, n = this->_internal_deses_size(); i < n; i++) {
    const auto& s = this->_internal_deses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TABNAMES_PAGE_RSP.deses");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  return target;
}

size_t PK_GET_TABNAMES_PAGE_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated string deses = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deses_.size());
  for (int i = 0, n = deses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deses_.Get(i));
  }

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // uint32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TABNAMES_PAGE_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TABNAMES_PAGE_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TABNAMES_PAGE_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TABNAMES_PAGE_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TABNAMES_PAGE_RSP)
    MergeFrom(*source);
  }
}

void PK_GET_TABNAMES_PAGE_RSP::MergeFrom(const PK_GET_TABNAMES_PAGE_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  deses_.MergeFrom(from.deses_);
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void PK_GET_TABNAMES_PAGE_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TABNAMES_PAGE_RSP::CopyFrom(const PK_GET_TABNAMES_PAGE_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TABNAMES_PAGE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TABNAMES_PAGE_RSP::IsInitialized() const {
  return true;
}

void PK_GET_TABNAMES_PAGE_RSP::InternalSwap(PK_GET_TABNAMES_PAGE_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  deses_.InternalSwap(&other->deses_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TABNAMES_PAGE_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TAB_SQL_REQ::InitAsDefaultInstance() {
}
class PK_GET_TAB_SQL_REQ::_Internal {
 public:
};

PK_GET_TAB_SQL_REQ::PK_GET_TAB_SQL_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TAB_SQL_REQ)
}
PK_GET_TAB_SQL_REQ::PK_GET_TAB_SQL_REQ(const PK_GET_TAB_SQL_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tabname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tabname().empty()) {
    tabname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tabname_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TAB_SQL_REQ)
}

void PK_GET_TAB_SQL_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TAB_SQL_REQ_api_2eproto.base);
  tabname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_GET_TAB_SQL_REQ::~PK_GET_TAB_SQL_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TAB_SQL_REQ)
  SharedDtor();
}

void PK_GET_TAB_SQL_REQ::SharedDtor() {
  tabname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TAB_SQL_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TAB_SQL_REQ& PK_GET_TAB_SQL_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TAB_SQL_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TAB_SQL_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TAB_SQL_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tabname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_GET_TAB_SQL_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tabname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tabname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_SQL_REQ.tabname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TAB_SQL_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TAB_SQL_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tabname = 1;
  if (this->tabname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tabname().data(), static_cast<int>(this->_internal_tabname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_SQL_REQ.tabname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tabname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TAB_SQL_REQ)
  return target;
}

size_t PK_GET_TAB_SQL_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TAB_SQL_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tabname = 1;
  if (this->tabname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tabname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TAB_SQL_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TAB_SQL_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TAB_SQL_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TAB_SQL_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TAB_SQL_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TAB_SQL_REQ)
    MergeFrom(*source);
  }
}

void PK_GET_TAB_SQL_REQ::MergeFrom(const PK_GET_TAB_SQL_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TAB_SQL_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tabname().size() > 0) {

    tabname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tabname_);
  }
}

void PK_GET_TAB_SQL_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TAB_SQL_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TAB_SQL_REQ::CopyFrom(const PK_GET_TAB_SQL_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TAB_SQL_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TAB_SQL_REQ::IsInitialized() const {
  return true;
}

void PK_GET_TAB_SQL_REQ::InternalSwap(PK_GET_TAB_SQL_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tabname_.Swap(&other->tabname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TAB_SQL_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TAB_SQL_RSP::InitAsDefaultInstance() {
}
class PK_GET_TAB_SQL_RSP::_Internal {
 public:
};

PK_GET_TAB_SQL_RSP::PK_GET_TAB_SQL_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TAB_SQL_RSP)
}
PK_GET_TAB_SQL_RSP::PK_GET_TAB_SQL_RSP(const PK_GET_TAB_SQL_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sql().empty()) {
    sql_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TAB_SQL_RSP)
}

void PK_GET_TAB_SQL_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TAB_SQL_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_GET_TAB_SQL_RSP::~PK_GET_TAB_SQL_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TAB_SQL_RSP)
  SharedDtor();
}

void PK_GET_TAB_SQL_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TAB_SQL_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TAB_SQL_RSP& PK_GET_TAB_SQL_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TAB_SQL_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TAB_SQL_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TAB_SQL_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_GET_TAB_SQL_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_SQL_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sql();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_SQL_RSP.sql"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TAB_SQL_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TAB_SQL_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_SQL_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  // string sql = 2;
  if (this->sql().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql().data(), static_cast<int>(this->_internal_sql().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_SQL_RSP.sql");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sql(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TAB_SQL_RSP)
  return target;
}

size_t PK_GET_TAB_SQL_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TAB_SQL_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string sql = 2;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TAB_SQL_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TAB_SQL_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TAB_SQL_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TAB_SQL_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TAB_SQL_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TAB_SQL_RSP)
    MergeFrom(*source);
  }
}

void PK_GET_TAB_SQL_RSP::MergeFrom(const PK_GET_TAB_SQL_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TAB_SQL_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
}

void PK_GET_TAB_SQL_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TAB_SQL_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TAB_SQL_RSP::CopyFrom(const PK_GET_TAB_SQL_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TAB_SQL_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TAB_SQL_RSP::IsInitialized() const {
  return true;
}

void PK_GET_TAB_SQL_RSP::InternalSwap(PK_GET_TAB_SQL_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_.Swap(&other->sql_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TAB_SQL_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TAB_MODEL_CODE_REQ::InitAsDefaultInstance() {
}
class PK_GET_TAB_MODEL_CODE_REQ::_Internal {
 public:
};

PK_GET_TAB_MODEL_CODE_REQ::PK_GET_TAB_MODEL_CODE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
}
PK_GET_TAB_MODEL_CODE_REQ::PK_GET_TAB_MODEL_CODE_REQ(const PK_GET_TAB_MODEL_CODE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tabname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tabname().empty()) {
    tabname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tabname_);
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
}

void PK_GET_TAB_MODEL_CODE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto.base);
  tabname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_GET_TAB_MODEL_CODE_REQ::~PK_GET_TAB_MODEL_CODE_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  SharedDtor();
}

void PK_GET_TAB_MODEL_CODE_REQ::SharedDtor() {
  tabname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TAB_MODEL_CODE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TAB_MODEL_CODE_REQ& PK_GET_TAB_MODEL_CODE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TAB_MODEL_CODE_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TAB_MODEL_CODE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tabname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_GET_TAB_MODEL_CODE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tabname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tabname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TAB_MODEL_CODE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tabname = 1;
  if (this->tabname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tabname().data(), static_cast<int>(this->_internal_tabname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_MODEL_CODE_REQ.tabname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tabname(), target);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_MODEL_CODE_REQ.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  return target;
}

size_t PK_GET_TAB_MODEL_CODE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tabname = 1;
  if (this->tabname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tabname());
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TAB_MODEL_CODE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TAB_MODEL_CODE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TAB_MODEL_CODE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
    MergeFrom(*source);
  }
}

void PK_GET_TAB_MODEL_CODE_REQ::MergeFrom(const PK_GET_TAB_MODEL_CODE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tabname().size() > 0) {

    tabname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tabname_);
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
}

void PK_GET_TAB_MODEL_CODE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TAB_MODEL_CODE_REQ::CopyFrom(const PK_GET_TAB_MODEL_CODE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TAB_MODEL_CODE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TAB_MODEL_CODE_REQ::IsInitialized() const {
  return true;
}

void PK_GET_TAB_MODEL_CODE_REQ::InternalSwap(PK_GET_TAB_MODEL_CODE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tabname_.Swap(&other->tabname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TAB_MODEL_CODE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_GET_TAB_MODEL_CODE_RSP::InitAsDefaultInstance() {
}
class PK_GET_TAB_MODEL_CODE_RSP::_Internal {
 public:
};

PK_GET_TAB_MODEL_CODE_RSP::PK_GET_TAB_MODEL_CODE_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
}
PK_GET_TAB_MODEL_CODE_RSP::PK_GET_TAB_MODEL_CODE_RSP(const PK_GET_TAB_MODEL_CODE_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
}

void PK_GET_TAB_MODEL_CODE_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_GET_TAB_MODEL_CODE_RSP::~PK_GET_TAB_MODEL_CODE_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  SharedDtor();
}

void PK_GET_TAB_MODEL_CODE_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_GET_TAB_MODEL_CODE_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_GET_TAB_MODEL_CODE_RSP& PK_GET_TAB_MODEL_CODE_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_GET_TAB_MODEL_CODE_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_GET_TAB_MODEL_CODE_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_GET_TAB_MODEL_CODE_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_GET_TAB_MODEL_CODE_RSP.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_GET_TAB_MODEL_CODE_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_MODEL_CODE_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_GET_TAB_MODEL_CODE_RSP.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  return target;
}

size_t PK_GET_TAB_MODEL_CODE_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_GET_TAB_MODEL_CODE_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_GET_TAB_MODEL_CODE_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_GET_TAB_MODEL_CODE_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
    MergeFrom(*source);
  }
}

void PK_GET_TAB_MODEL_CODE_RSP::MergeFrom(const PK_GET_TAB_MODEL_CODE_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void PK_GET_TAB_MODEL_CODE_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_GET_TAB_MODEL_CODE_RSP::CopyFrom(const PK_GET_TAB_MODEL_CODE_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_GET_TAB_MODEL_CODE_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_GET_TAB_MODEL_CODE_RSP::IsInitialized() const {
  return true;
}

void PK_GET_TAB_MODEL_CODE_RSP::InternalSwap(PK_GET_TAB_MODEL_CODE_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_GET_TAB_MODEL_CODE_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_SET_LOG_DIR_REQ::InitAsDefaultInstance() {
}
class PK_SET_LOG_DIR_REQ::_Internal {
 public:
};

PK_SET_LOG_DIR_REQ::PK_SET_LOG_DIR_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_SET_LOG_DIR_REQ)
}
PK_SET_LOG_DIR_REQ::PK_SET_LOG_DIR_REQ(const PK_SET_LOG_DIR_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dir().empty()) {
    dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dir_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_SET_LOG_DIR_REQ)
}

void PK_SET_LOG_DIR_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_SET_LOG_DIR_REQ_api_2eproto.base);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_SET_LOG_DIR_REQ::~PK_SET_LOG_DIR_REQ() {
  // @@protoc_insertion_point(destructor:pbapi.PK_SET_LOG_DIR_REQ)
  SharedDtor();
}

void PK_SET_LOG_DIR_REQ::SharedDtor() {
  dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_SET_LOG_DIR_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_SET_LOG_DIR_REQ& PK_SET_LOG_DIR_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_SET_LOG_DIR_REQ_api_2eproto.base);
  return *internal_default_instance();
}


void PK_SET_LOG_DIR_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_SET_LOG_DIR_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_SET_LOG_DIR_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_SET_LOG_DIR_REQ.dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_SET_LOG_DIR_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_SET_LOG_DIR_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dir = 1;
  if (this->dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dir().data(), static_cast<int>(this->_internal_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_SET_LOG_DIR_REQ.dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_SET_LOG_DIR_REQ)
  return target;
}

size_t PK_SET_LOG_DIR_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_SET_LOG_DIR_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dir = 1;
  if (this->dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_SET_LOG_DIR_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_SET_LOG_DIR_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_SET_LOG_DIR_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_SET_LOG_DIR_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_SET_LOG_DIR_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_SET_LOG_DIR_REQ)
    MergeFrom(*source);
  }
}

void PK_SET_LOG_DIR_REQ::MergeFrom(const PK_SET_LOG_DIR_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_SET_LOG_DIR_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dir().size() > 0) {

    dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dir_);
  }
}

void PK_SET_LOG_DIR_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_SET_LOG_DIR_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_SET_LOG_DIR_REQ::CopyFrom(const PK_SET_LOG_DIR_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_SET_LOG_DIR_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_SET_LOG_DIR_REQ::IsInitialized() const {
  return true;
}

void PK_SET_LOG_DIR_REQ::InternalSwap(PK_SET_LOG_DIR_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dir_.Swap(&other->dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_SET_LOG_DIR_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PK_SET_LOG_DIR_RSP::InitAsDefaultInstance() {
}
class PK_SET_LOG_DIR_RSP::_Internal {
 public:
};

PK_SET_LOG_DIR_RSP::PK_SET_LOG_DIR_RSP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbapi.PK_SET_LOG_DIR_RSP)
}
PK_SET_LOG_DIR_RSP::PK_SET_LOG_DIR_RSP(const PK_SET_LOG_DIR_RSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:pbapi.PK_SET_LOG_DIR_RSP)
}

void PK_SET_LOG_DIR_RSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PK_SET_LOG_DIR_RSP_api_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PK_SET_LOG_DIR_RSP::~PK_SET_LOG_DIR_RSP() {
  // @@protoc_insertion_point(destructor:pbapi.PK_SET_LOG_DIR_RSP)
  SharedDtor();
}

void PK_SET_LOG_DIR_RSP::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PK_SET_LOG_DIR_RSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PK_SET_LOG_DIR_RSP& PK_SET_LOG_DIR_RSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PK_SET_LOG_DIR_RSP_api_2eproto.base);
  return *internal_default_instance();
}


void PK_SET_LOG_DIR_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pbapi.PK_SET_LOG_DIR_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PK_SET_LOG_DIR_RSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbapi.PK_SET_LOG_DIR_RSP.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PK_SET_LOG_DIR_RSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbapi.PK_SET_LOG_DIR_RSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbapi.PK_SET_LOG_DIR_RSP.errmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbapi.PK_SET_LOG_DIR_RSP)
  return target;
}

size_t PK_SET_LOG_DIR_RSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbapi.PK_SET_LOG_DIR_RSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errmsg = 1;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PK_SET_LOG_DIR_RSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbapi.PK_SET_LOG_DIR_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PK_SET_LOG_DIR_RSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PK_SET_LOG_DIR_RSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbapi.PK_SET_LOG_DIR_RSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbapi.PK_SET_LOG_DIR_RSP)
    MergeFrom(*source);
  }
}

void PK_SET_LOG_DIR_RSP::MergeFrom(const PK_SET_LOG_DIR_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbapi.PK_SET_LOG_DIR_RSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void PK_SET_LOG_DIR_RSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbapi.PK_SET_LOG_DIR_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK_SET_LOG_DIR_RSP::CopyFrom(const PK_SET_LOG_DIR_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbapi.PK_SET_LOG_DIR_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK_SET_LOG_DIR_RSP::IsInitialized() const {
  return true;
}

void PK_SET_LOG_DIR_RSP::InternalSwap(PK_SET_LOG_DIR_RSP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PK_SET_LOG_DIR_RSP::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbapi::PK_KEEPALIVE_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_KEEPALIVE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_KEEPALIVE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_KEEPALIVE_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_KEEPALIVE_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_KEEPALIVE_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_USER_LOGIN_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_USER_LOGIN_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_USER_LOGIN_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_USER_LOGIN_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_USER_LOGIN_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_USER_LOGIN_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_ALL_TABNAMES_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_GET_ALL_TABNAMES_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_ALL_TABNAMES_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_ALL_TABNAMES_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_GET_ALL_TABNAMES_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_ALL_TABNAMES_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_OPEN_DB_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_OPEN_DB_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_OPEN_DB_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_OPEN_DB_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_OPEN_DB_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_OPEN_DB_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TABNAMES_PAGE_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TABNAMES_PAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TABNAMES_PAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TABNAMES_PAGE_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TABNAMES_PAGE_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TABNAMES_PAGE_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TAB_SQL_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TAB_SQL_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TAB_SQL_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TAB_SQL_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TAB_SQL_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TAB_SQL_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TAB_MODEL_CODE_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TAB_MODEL_CODE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TAB_MODEL_CODE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_GET_TAB_MODEL_CODE_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_GET_TAB_MODEL_CODE_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_GET_TAB_MODEL_CODE_RSP >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_SET_LOG_DIR_REQ* Arena::CreateMaybeMessage< ::pbapi::PK_SET_LOG_DIR_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_SET_LOG_DIR_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbapi::PK_SET_LOG_DIR_RSP* Arena::CreateMaybeMessage< ::pbapi::PK_SET_LOG_DIR_RSP >(Arena* arena) {
  return Arena::CreateInternal< ::pbapi::PK_SET_LOG_DIR_RSP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
